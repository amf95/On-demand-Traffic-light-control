
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a7c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800060  00800060  00000af0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001452  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000952  00000000  00000000  000020f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c10  00000000  00000000  00002a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00003658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000644  00000000  00000000  00003870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae5  00000000  00000000  00003eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004999  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	13 01       	movw	r2, r6
  56:	1d 01       	movw	r2, r26
  58:	52 01       	movw	r10, r4
  5a:	69 01       	movw	r12, r18
  5c:	a0 01       	movw	r20, r0
  5e:	fa 01       	movw	r30, r20
  60:	29 02       	muls	r18, r25
  62:	07 01       	movw	r0, r14
  64:	73 02       	muls	r23, r19
  66:	c3 02       	muls	r28, r19

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 37       	cpi	r26, 0x75	; 117
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 26 03 	call	0x64c	; 0x64c <main>
  88:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
#define YELLOW_SIGN_WAIT_TIME 250 // ms 

unsigned long volatile buttonCounter;
uint8_t  buttonState;
// BUTTON, PORTD2, FALING
ISR(EXT_INT_0){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	if(currentState == C_GREEN
  9c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	41 f0       	breq	.+16     	; 0xb4 <__vector_1+0x24>
	|| currentState == C_YELLOW
  a4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
  a8:	84 30       	cpi	r24, 0x04	; 4
  aa:	21 f0       	breq	.+8      	; 0xb4 <__vector_1+0x24>
	|| currentState == C_RED){
  ac:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
  b0:	85 30       	cpi	r24, 0x05	; 5
  b2:	39 f4       	brne	.+14     	; 0xc2 <__vector_1+0x32>
		nextState = PEDESTRIAN;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
		prevState = currentState;
  ba:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
  be:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
	}
}
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <carsCurretLED>:
		}*/
	}
}

void carsCurretLED(uint8_t color){
	switch(color){
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	f9 f0       	breq	.+62     	; 0x110 <carsCurretLED+0x42>
  d2:	88 f0       	brcs	.+34     	; 0xf6 <carsCurretLED+0x28>
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	49 f1       	breq	.+82     	; 0x12a <carsCurretLED+0x5c>
  d8:	83 30       	cpi	r24, 0x03	; 3
  da:	99 f5       	brne	.+102    	; 0x142 <carsCurretLED+0x74>
		case OFF:
			LED_off(C_GREEN_LED_PIN, C_LEDS_PORT);
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			LED_off(C_YELLOW_LED_PIN, C_LEDS_PORT);
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			LED_off(C_RED_LED_PIN, C_LEDS_PORT);
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			break;
  f4:	08 95       	ret
		case GREEN:
			LED_on(C_GREEN_LED_PIN, C_LEDS_PORT);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 1b 03 	call	0x636	; 0x636 <LED_on>
			LED_off(C_YELLOW_LED_PIN, C_LEDS_PORT);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			LED_off(C_RED_LED_PIN, C_LEDS_PORT);
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			break;
 10e:	08 95       	ret
		case YELLOW:
			LED_off(C_GREEN_LED_PIN, C_LEDS_PORT);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			LED_toggle(C_YELLOW_LED_PIN, C_LEDS_PORT);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 23 03 	call	0x646	; 0x646 <LED_toggle>
			LED_off(C_RED_LED_PIN, C_LEDS_PORT);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			break;
 128:	08 95       	ret
		case RED:
			LED_off(C_GREEN_LED_PIN, C_LEDS_PORT);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			LED_off(C_YELLOW_LED_PIN, C_LEDS_PORT);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			LED_on(C_RED_LED_PIN, C_LEDS_PORT);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 1b 03 	call	0x636	; 0x636 <LED_on>
 142:	08 95       	ret

00000144 <pedestriansCurretLED>:
	}
}


void pedestriansCurretLED(uint8_t color){
	switch(color){
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	f9 f0       	breq	.+62     	; 0x186 <pedestriansCurretLED+0x42>
 148:	88 f0       	brcs	.+34     	; 0x16c <pedestriansCurretLED+0x28>
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	49 f1       	breq	.+82     	; 0x1a0 <pedestriansCurretLED+0x5c>
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	99 f5       	brne	.+102    	; 0x1b8 <pedestriansCurretLED+0x74>
		case OFF:
			LED_off(P_GREEN_LED_PIN, P_LEDS_PORT);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			LED_off(P_YELLOW_LED_PIN, P_LEDS_PORT);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			LED_off(P_RED_LED_PIN, P_LEDS_PORT);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			break;
 16a:	08 95       	ret
		case GREEN:
			LED_on(P_GREEN_LED_PIN, P_LEDS_PORT);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 1b 03 	call	0x636	; 0x636 <LED_on>
			LED_off(P_YELLOW_LED_PIN, P_LEDS_PORT);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			LED_off(P_RED_LED_PIN, P_LEDS_PORT);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			break;
 184:	08 95       	ret
		case YELLOW:
			LED_off(P_GREEN_LED_PIN, P_LEDS_PORT);
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			LED_toggle(P_YELLOW_LED_PIN, P_LEDS_PORT);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 23 03 	call	0x646	; 0x646 <LED_toggle>
			LED_off(P_RED_LED_PIN, P_LEDS_PORT);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			break;
 19e:	08 95       	ret
		case RED:
			LED_off(P_GREEN_LED_PIN, P_LEDS_PORT);
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			LED_off(P_YELLOW_LED_PIN, P_LEDS_PORT);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 1f 03 	call	0x63e	; 0x63e <LED_off>
			LED_on(P_RED_LED_PIN, P_LEDS_PORT);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 1b 03 	call	0x636	; 0x636 <LED_on>
 1b8:	08 95       	ret

000001ba <APP_init>:
}

void APP_init(){
	
	// init Pedestrian leds
	LED_init(P_GREEN_LED_PIN, P_LEDS_PORT);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 17 03 	call	0x62e	; 0x62e <LED_init>
	LED_init(P_YELLOW_LED_PIN, P_LEDS_PORT);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 17 03 	call	0x62e	; 0x62e <LED_init>
	LED_init(P_RED_LED_PIN, P_LEDS_PORT);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 17 03 	call	0x62e	; 0x62e <LED_init>
	pedestriansCurretLED(OFF);
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
	
	// init Cars leds
	LED_init(C_GREEN_LED_PIN, C_LEDS_PORT);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 17 03 	call	0x62e	; 0x62e <LED_init>
	LED_init(C_YELLOW_LED_PIN, C_LEDS_PORT);
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 17 03 	call	0x62e	; 0x62e <LED_init>
	LED_init(C_RED_LED_PIN, C_LEDS_PORT);
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 17 03 	call	0x62e	; 0x62e <LED_init>
	carsCurretLED(OFF);
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
	
	// init button
	BUTTON_init(P_BUTTON_PIN, P_BUTTON_PORT);
 1f6:	63 e0       	ldi	r22, 0x03	; 3
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	0e 94 13 03 	call	0x626	; 0x626 <BUTTON_init>
	
	sei(); // enable global interrupt
 1fe:	78 94       	sei
	
	// enable external interrupter 0 PORTD2
	EXT_INT_0_FALLING_init();
 200:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EXT_INT_0_FALLING_init>
	
	MILLIS_init(); // timer 2 INT
 204:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <MILLIS_init>
	
	nextState = START;	
 208:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <nextState>
 20c:	08 95       	ret

0000020e <APP_start>:
}

void APP_start(){
	
	while(1){		
		switch(nextState){
 20e:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <nextState>
 212:	8e 2f       	mov	r24, r30
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	8a 30       	cpi	r24, 0x0A	; 10
 218:	91 05       	cpc	r25, r1
 21a:	c8 f7       	brcc	.-14     	; 0x20e <APP_start>
 21c:	fc 01       	movw	r30, r24
 21e:	e6 5d       	subi	r30, 0xD6	; 214
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__tablejump2__>
			case START:
				currentState = START;
 226:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <currentState>
				prevState = currentState;
 22a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 22e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
				nextState = NORMAL_MODE;
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
				break;
 238:	ea cf       	rjmp	.-44     	; 0x20e <APP_start>
				/*BUTTON_read(P_BUTTON_PIN, P_BUTTON_PORT, &buttonState);
				if(buttonState == LOW){
					nextState = currentState;
					continue;
				}*/
				currentState = PEDESTRIAN;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				if((prevState == C_RED)){
 240:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 244:	85 30       	cpi	r24, 0x05	; 5
 246:	21 f4       	brne	.+8      	; 0x250 <APP_start+0x42>
					nextState = P_CR_PG;
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
 24e:	1b c0       	rjmp	.+54     	; 0x286 <APP_start+0x78>
				}
				else if((prevState == C_GREEN) || (prevState == C_YELLOW)){
 250:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	21 f0       	breq	.+8      	; 0x260 <APP_start+0x52>
 258:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 25c:	84 30       	cpi	r24, 0x04	; 4
 25e:	99 f4       	brne	.+38     	; 0x286 <APP_start+0x78>
					nextState = P_PR_BOTH_Y_BLINK;
 260:	89 e0       	ldi	r24, 0x09	; 9
 262:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
					carsCurretLED(OFF); // sync both leds
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
					pedestriansCurretLED(OFF);  // sync both leds
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
					yellowTimeCounter = millis();
 272:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 276:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <yellowTimeCounter>
 27a:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <yellowTimeCounter+0x1>
 27e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <yellowTimeCounter+0x2>
 282:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <yellowTimeCounter+0x3>
				}
				prevState = currentState;
 286:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 28a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
				timeCounter = millis();
 28e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 292:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 296:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 29a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 29e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
				break;
 2a2:	b5 cf       	rjmp	.-150    	; 0x20e <APP_start>
				
			case NORMAL_MODE:
				currentState = NORMAL_MODE;
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				prevState = currentState;
 2aa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 2ae:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
				nextState = C_GREEN;
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
				pedestriansCurretLED(OFF);
 2b8:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
				timeCounter = millis();
 2bc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 2c0:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 2c4:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 2c8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 2cc:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
				break;
 2d0:	9e cf       	rjmp	.-196    	; 0x20e <APP_start>
				
			case C_GREEN:
				currentState = C_GREEN;
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				carsCurretLED(GREEN);
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
				pedestriansCurretLED(RED);
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
				if(millis() >= timeCounter + SIGN_WAIT_TIME){
 2e4:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 2e8:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <timeCounter>
 2ec:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <timeCounter+0x1>
 2f0:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <timeCounter+0x2>
 2f4:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <timeCounter+0x3>
 2f8:	08 57       	subi	r16, 0x78	; 120
 2fa:	1c 4e       	sbci	r17, 0xEC	; 236
 2fc:	2f 4f       	sbci	r18, 0xFF	; 255
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
 300:	60 17       	cp	r22, r16
 302:	71 07       	cpc	r23, r17
 304:	82 07       	cpc	r24, r18
 306:	93 07       	cpc	r25, r19
 308:	08 f4       	brcc	.+2      	; 0x30c <APP_start+0xfe>
 30a:	81 cf       	rjmp	.-254    	; 0x20e <APP_start>
					timeCounter = millis();
 30c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 310:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 314:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 318:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 31c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
					yellowTimeCounter = timeCounter;
 320:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <yellowTimeCounter>
 324:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <yellowTimeCounter+0x1>
 328:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <yellowTimeCounter+0x2>
 32c:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <yellowTimeCounter+0x3>
					//if((prevState == NORMAL_MODE) || (prevState == YELLOW)){
						nextState = C_YELLOW;
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
						prevState = currentState;
 336:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 33a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 33e:	67 cf       	rjmp	.-306    	; 0x20e <APP_start>
					//}
				}
				break;
			case C_YELLOW:
				currentState = C_YELLOW;
 340:	84 e0       	ldi	r24, 0x04	; 4
 342:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				// Blink YELLOW code
				if(millis() >= yellowTimeCounter + YELLOW_SIGN_WAIT_TIME){
 346:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 34a:	00 91 70 00 	lds	r16, 0x0070	; 0x800070 <yellowTimeCounter>
 34e:	10 91 71 00 	lds	r17, 0x0071	; 0x800071 <yellowTimeCounter+0x1>
 352:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <yellowTimeCounter+0x2>
 356:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <yellowTimeCounter+0x3>
 35a:	06 50       	subi	r16, 0x06	; 6
 35c:	1f 4f       	sbci	r17, 0xFF	; 255
 35e:	2f 4f       	sbci	r18, 0xFF	; 255
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	60 17       	cp	r22, r16
 364:	71 07       	cpc	r23, r17
 366:	82 07       	cpc	r24, r18
 368:	93 07       	cpc	r25, r19
 36a:	68 f0       	brcs	.+26     	; 0x386 <APP_start+0x178>
					yellowTimeCounter = millis();
 36c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 370:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <yellowTimeCounter>
 374:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <yellowTimeCounter+0x1>
 378:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <yellowTimeCounter+0x2>
 37c:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <yellowTimeCounter+0x3>
					carsCurretLED(YELLOW);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
				}
				if(millis() >= timeCounter + SIGN_WAIT_TIME){
 386:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 38a:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <timeCounter>
 38e:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <timeCounter+0x1>
 392:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <timeCounter+0x2>
 396:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <timeCounter+0x3>
 39a:	08 57       	subi	r16, 0x78	; 120
 39c:	1c 4e       	sbci	r17, 0xEC	; 236
 39e:	2f 4f       	sbci	r18, 0xFF	; 255
 3a0:	3f 4f       	sbci	r19, 0xFF	; 255
 3a2:	60 17       	cp	r22, r16
 3a4:	71 07       	cpc	r23, r17
 3a6:	82 07       	cpc	r24, r18
 3a8:	93 07       	cpc	r25, r19
 3aa:	08 f4       	brcc	.+2      	; 0x3ae <APP_start+0x1a0>
 3ac:	30 cf       	rjmp	.-416    	; 0x20e <APP_start>
					timeCounter = millis();
 3ae:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 3b2:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 3b6:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 3ba:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 3be:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
					if((prevState == C_GREEN)){
 3c2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 3c6:	83 30       	cpi	r24, 0x03	; 3
 3c8:	41 f4       	brne	.+16     	; 0x3da <APP_start+0x1cc>
						nextState = C_RED;
 3ca:	85 e0       	ldi	r24, 0x05	; 5
 3cc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
						prevState = currentState;
 3d0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 3d4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 3d8:	1a cf       	rjmp	.-460    	; 0x20e <APP_start>
					} else if((prevState == C_RED)){
 3da:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 3de:	85 30       	cpi	r24, 0x05	; 5
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <APP_start+0x1d6>
 3e2:	15 cf       	rjmp	.-470    	; 0x20e <APP_start>
						nextState = C_GREEN;
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
						prevState = currentState;
 3ea:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 3ee:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 3f2:	0d cf       	rjmp	.-486    	; 0x20e <APP_start>
					}
				}
				break;
				
			case C_RED:
				currentState = C_RED;
 3f4:	85 e0       	ldi	r24, 0x05	; 5
 3f6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				carsCurretLED(RED);
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
				pedestriansCurretLED(OFF);
 400:	83 e0       	ldi	r24, 0x03	; 3
 402:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
				if(millis() >= timeCounter + SIGN_WAIT_TIME){
 406:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 40a:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <timeCounter>
 40e:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <timeCounter+0x1>
 412:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <timeCounter+0x2>
 416:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <timeCounter+0x3>
 41a:	08 57       	subi	r16, 0x78	; 120
 41c:	1c 4e       	sbci	r17, 0xEC	; 236
 41e:	2f 4f       	sbci	r18, 0xFF	; 255
 420:	3f 4f       	sbci	r19, 0xFF	; 255
 422:	60 17       	cp	r22, r16
 424:	71 07       	cpc	r23, r17
 426:	82 07       	cpc	r24, r18
 428:	93 07       	cpc	r25, r19
 42a:	08 f4       	brcc	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42c:	f0 ce       	rjmp	.-544    	; 0x20e <APP_start>
					timeCounter = millis();
 42e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 432:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 436:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 43a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 43e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
					//if((prevState == NORMAL_MODE) || (prevState == YELLOW)){
					nextState = C_YELLOW;
 442:	84 e0       	ldi	r24, 0x04	; 4
 444:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
					prevState = currentState;
 448:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 44c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 450:	de ce       	rjmp	.-580    	; 0x20e <APP_start>
					//}
				}
				break;
				
			case P_CR_PG:
				currentState = P_CR_PG;
 452:	86 e0       	ldi	r24, 0x06	; 6
 454:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				carsCurretLED(RED);
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
				pedestriansCurretLED(GREEN);
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
				if(millis() >= timeCounter + SIGN_WAIT_TIME){
 464:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 468:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <timeCounter>
 46c:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <timeCounter+0x1>
 470:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <timeCounter+0x2>
 474:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <timeCounter+0x3>
 478:	08 57       	subi	r16, 0x78	; 120
 47a:	1c 4e       	sbci	r17, 0xEC	; 236
 47c:	2f 4f       	sbci	r18, 0xFF	; 255
 47e:	3f 4f       	sbci	r19, 0xFF	; 255
 480:	60 17       	cp	r22, r16
 482:	71 07       	cpc	r23, r17
 484:	82 07       	cpc	r24, r18
 486:	93 07       	cpc	r25, r19
 488:	08 f4       	brcc	.+2      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 48a:	c1 ce       	rjmp	.-638    	; 0x20e <APP_start>
					timeCounter = millis();
 48c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 490:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 494:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 498:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 49c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
					if((prevState == PEDESTRIAN)){
 4a0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	41 f4       	brne	.+16     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
						nextState = NORMAL_MODE;
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
						prevState = currentState;
 4ae:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 4b2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 4b6:	ab ce       	rjmp	.-682    	; 0x20e <APP_start>
					}
					else if((prevState == P_PR_BOTH_Y_BLINK)){
 4b8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 4bc:	89 30       	cpi	r24, 0x09	; 9
 4be:	09 f0       	breq	.+2      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4c0:	a6 ce       	rjmp	.-692    	; 0x20e <APP_start>
						nextState = P_PG_BOTH_Y_BLINK;
 4c2:	88 e0       	ldi	r24, 0x08	; 8
 4c4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
						prevState = currentState;
 4c8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 4cc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
						yellowTimeCounter = millis();
 4d0:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 4d4:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <yellowTimeCounter>
 4d8:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <yellowTimeCounter+0x1>
 4dc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <yellowTimeCounter+0x2>
 4e0:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <yellowTimeCounter+0x3>
 4e4:	94 ce       	rjmp	.-728    	; 0x20e <APP_start>
				
			case P_CG_PR:
				
				break;
			case P_PG_BOTH_Y_BLINK:
				currentState = P_PG_BOTH_Y_BLINK;
 4e6:	88 e0       	ldi	r24, 0x08	; 8
 4e8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				//pedestriansCurretLED(GREEN);
				// Blink YELLOW code
				if(millis() >= yellowTimeCounter + YELLOW_SIGN_WAIT_TIME){
 4ec:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 4f0:	00 91 70 00 	lds	r16, 0x0070	; 0x800070 <yellowTimeCounter>
 4f4:	10 91 71 00 	lds	r17, 0x0071	; 0x800071 <yellowTimeCounter+0x1>
 4f8:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <yellowTimeCounter+0x2>
 4fc:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <yellowTimeCounter+0x3>
 500:	06 50       	subi	r16, 0x06	; 6
 502:	1f 4f       	sbci	r17, 0xFF	; 255
 504:	2f 4f       	sbci	r18, 0xFF	; 255
 506:	3f 4f       	sbci	r19, 0xFF	; 255
 508:	60 17       	cp	r22, r16
 50a:	71 07       	cpc	r23, r17
 50c:	82 07       	cpc	r24, r18
 50e:	93 07       	cpc	r25, r19
 510:	80 f0       	brcs	.+32     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
					yellowTimeCounter = millis();
 512:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 516:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <yellowTimeCounter>
 51a:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <yellowTimeCounter+0x1>
 51e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <yellowTimeCounter+0x2>
 522:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <yellowTimeCounter+0x3>
					carsCurretLED(YELLOW);
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
					pedestriansCurretLED(YELLOW);
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
				}
				LED_on(P_GREEN_LED_PIN,P_LEDS_PORT);
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	0e 94 1b 03 	call	0x636	; 0x636 <LED_on>
				if(millis() >= timeCounter + SIGN_WAIT_TIME){
 53a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 53e:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <timeCounter>
 542:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <timeCounter+0x1>
 546:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <timeCounter+0x2>
 54a:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <timeCounter+0x3>
 54e:	08 57       	subi	r16, 0x78	; 120
 550:	1c 4e       	sbci	r17, 0xEC	; 236
 552:	2f 4f       	sbci	r18, 0xFF	; 255
 554:	3f 4f       	sbci	r19, 0xFF	; 255
 556:	60 17       	cp	r22, r16
 558:	71 07       	cpc	r23, r17
 55a:	82 07       	cpc	r24, r18
 55c:	93 07       	cpc	r25, r19
 55e:	08 f4       	brcc	.+2      	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
 560:	56 ce       	rjmp	.-852    	; 0x20e <APP_start>
					timeCounter = millis();
 562:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 566:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 56a:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 56e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 572:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
					//if((prevState == NORMAL_MODE) || (prevState == YELLOW)){
					nextState = NORMAL_MODE;
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
					prevState = currentState;
 57c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 580:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 584:	44 ce       	rjmp	.-888    	; 0x20e <APP_start>
					//}
				}
				break;
				
			case P_PR_BOTH_Y_BLINK:
				currentState = P_PR_BOTH_Y_BLINK;
 586:	89 e0       	ldi	r24, 0x09	; 9
 588:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				//pedestriansCurretLED(RED);
				// Blink YELLOW code
				if(millis() >= yellowTimeCounter + YELLOW_SIGN_WAIT_TIME){
 58c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 590:	00 91 70 00 	lds	r16, 0x0070	; 0x800070 <yellowTimeCounter>
 594:	10 91 71 00 	lds	r17, 0x0071	; 0x800071 <yellowTimeCounter+0x1>
 598:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <yellowTimeCounter+0x2>
 59c:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <yellowTimeCounter+0x3>
 5a0:	06 50       	subi	r16, 0x06	; 6
 5a2:	1f 4f       	sbci	r17, 0xFF	; 255
 5a4:	2f 4f       	sbci	r18, 0xFF	; 255
 5a6:	3f 4f       	sbci	r19, 0xFF	; 255
 5a8:	60 17       	cp	r22, r16
 5aa:	71 07       	cpc	r23, r17
 5ac:	82 07       	cpc	r24, r18
 5ae:	93 07       	cpc	r25, r19
 5b0:	80 f0       	brcs	.+32     	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
					yellowTimeCounter = millis();
 5b2:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 5b6:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <yellowTimeCounter>
 5ba:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <yellowTimeCounter+0x1>
 5be:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <yellowTimeCounter+0x2>
 5c2:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <yellowTimeCounter+0x3>
					carsCurretLED(YELLOW);
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
					pedestriansCurretLED(YELLOW);
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
				}
				LED_on(P_RED_LED_PIN, P_LEDS_PORT);
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	82 e0       	ldi	r24, 0x02	; 2
 5d6:	0e 94 1b 03 	call	0x636	; 0x636 <LED_on>
				if(millis() >= timeCounter + SIGN_WAIT_TIME){
 5da:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 5de:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <timeCounter>
 5e2:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <timeCounter+0x1>
 5e6:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <timeCounter+0x2>
 5ea:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <timeCounter+0x3>
 5ee:	08 57       	subi	r16, 0x78	; 120
 5f0:	1c 4e       	sbci	r17, 0xEC	; 236
 5f2:	2f 4f       	sbci	r18, 0xFF	; 255
 5f4:	3f 4f       	sbci	r19, 0xFF	; 255
 5f6:	60 17       	cp	r22, r16
 5f8:	71 07       	cpc	r23, r17
 5fa:	82 07       	cpc	r24, r18
 5fc:	93 07       	cpc	r25, r19
 5fe:	08 f4       	brcc	.+2      	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
 600:	06 ce       	rjmp	.-1012   	; 0x20e <APP_start>
					timeCounter = millis();
 602:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <millis>
 606:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 60a:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 60e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 612:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
					//if((prevState == NORMAL_MODE) || (prevState == YELLOW)){
					nextState = P_CR_PG;
 616:	86 e0       	ldi	r24, 0x06	; 6
 618:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
					prevState = currentState;
 61c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 620:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 624:	f4 cd       	rjmp	.-1048   	; 0x20e <APP_start>

00000626 <BUTTON_init>:
 */ 

#include "button.h"

DIO_ERR BUTTON_init(uint8_t pinNumber, uint8_t portNumber){
	return DIO_init(pinNumber, portNumber, INPUT);
 626:	40 e0       	ldi	r20, 0x00	; 0
 628:	0e 94 2d 03 	call	0x65a	; 0x65a <DIO_init>
}
 62c:	08 95       	ret

0000062e <LED_init>:
 */ 

#include "led.h"

DIO_ERR LED_init(uint8_t ledPin, uint8_t ledPort){
	return DIO_init(ledPin, ledPort, OUTPUT);
 62e:	41 e0       	ldi	r20, 0x01	; 1
 630:	0e 94 2d 03 	call	0x65a	; 0x65a <DIO_init>
}
 634:	08 95       	ret

00000636 <LED_on>:

DIO_ERR LED_on(uint8_t ledPin, uint8_t ledPort){ // active HIGH
	return DIO_write(ledPin, ledPort, HIGH);
 636:	41 e0       	ldi	r20, 0x01	; 1
 638:	0e 94 c7 03 	call	0x78e	; 0x78e <DIO_write>
}
 63c:	08 95       	ret

0000063e <LED_off>:

DIO_ERR LED_off(uint8_t ledPin, uint8_t ledPort){ // active HIGH
	return DIO_write(ledPin, ledPort, LOW);
 63e:	40 e0       	ldi	r20, 0x00	; 0
 640:	0e 94 c7 03 	call	0x78e	; 0x78e <DIO_write>
}
 644:	08 95       	ret

00000646 <LED_toggle>:

DIO_ERR LED_toggle(uint8_t ledPin, uint8_t ledPort){
	return DIO_toggle(ledPin, ledPort);
 646:	0e 94 cc 04 	call	0x998	; 0x998 <DIO_toggle>
 64a:	08 95       	ret

0000064c <main>:
 */ 

#include "Application/application.h"

int main(void){
	APP_init();
 64c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <APP_init>
	APP_start();
 650:	0e 94 07 01 	call	0x20e	; 0x20e <APP_start>
}
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	08 95       	ret

0000065a <DIO_init>:
#include "dio.h"


DIO_ERR DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction){
	
	switch (portNumber)
 65a:	61 30       	cpi	r22, 0x01	; 1
 65c:	51 f1       	breq	.+84     	; 0x6b2 <DIO_init+0x58>
 65e:	38 f0       	brcs	.+14     	; 0x66e <DIO_init+0x14>
 660:	62 30       	cpi	r22, 0x02	; 2
 662:	09 f4       	brne	.+2      	; 0x666 <DIO_init+0xc>
 664:	48 c0       	rjmp	.+144    	; 0x6f6 <DIO_init+0x9c>
 666:	63 30       	cpi	r22, 0x03	; 3
 668:	09 f4       	brne	.+2      	; 0x66c <DIO_init+0x12>
 66a:	66 c0       	rjmp	.+204    	; 0x738 <DIO_init+0xde>
 66c:	86 c0       	rjmp	.+268    	; 0x77a <DIO_init+0x120>
	{
		case PORT_A:
			if(direction == INPUT){
 66e:	41 11       	cpse	r20, r1
 670:	0f c0       	rjmp	.+30     	; 0x690 <DIO_init+0x36>
				DDRA &= ~(1<<pinNumber); // input
 672:	4a b3       	in	r20, 0x1a	; 26
 674:	21 e0       	ldi	r18, 0x01	; 1
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	b9 01       	movw	r22, r18
 67a:	02 c0       	rjmp	.+4      	; 0x680 <DIO_init+0x26>
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	8a 95       	dec	r24
 682:	e2 f7       	brpl	.-8      	; 0x67c <DIO_init+0x22>
 684:	cb 01       	movw	r24, r22
 686:	80 95       	com	r24
 688:	84 23       	and	r24, r20
 68a:	8a bb       	out	0x1a, r24	; 26
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	08 95       	ret
	{
		case PORT_A:
			if(direction == INPUT){
				DDRA &= ~(1<<pinNumber); // input
			}
			else if(direction == OUTPUT){
 690:	41 30       	cpi	r20, 0x01	; 1
 692:	09 f0       	breq	.+2      	; 0x696 <DIO_init+0x3c>
 694:	74 c0       	rjmp	.+232    	; 0x77e <DIO_init+0x124>
				DDRA |= (1<<pinNumber);  // output
 696:	4a b3       	in	r20, 0x1a	; 26
 698:	21 e0       	ldi	r18, 0x01	; 1
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	b9 01       	movw	r22, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_init+0x4a>
 6a0:	66 0f       	add	r22, r22
 6a2:	77 1f       	adc	r23, r23
 6a4:	8a 95       	dec	r24
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_init+0x46>
 6a8:	cb 01       	movw	r24, r22
 6aa:	84 2b       	or	r24, r20
 6ac:	8a bb       	out	0x1a, r24	; 26
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	08 95       	ret
			else{
				return WRONG_DIRECTION;
			}
			break;
		case PORT_B:
			if(direction == INPUT){
 6b2:	41 11       	cpse	r20, r1
 6b4:	0f c0       	rjmp	.+30     	; 0x6d4 <DIO_init+0x7a>
				DDRB &= ~(1<<pinNumber); // input
 6b6:	47 b3       	in	r20, 0x17	; 23
 6b8:	21 e0       	ldi	r18, 0x01	; 1
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	b9 01       	movw	r22, r18
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_init+0x6a>
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	8a 95       	dec	r24
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_init+0x66>
 6c8:	cb 01       	movw	r24, r22
 6ca:	80 95       	com	r24
 6cc:	84 23       	and	r24, r20
 6ce:	87 bb       	out	0x17, r24	; 23
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	08 95       	ret
			break;
		case PORT_B:
			if(direction == INPUT){
				DDRB &= ~(1<<pinNumber); // input
			}
			else if(direction == OUTPUT){
 6d4:	41 30       	cpi	r20, 0x01	; 1
 6d6:	09 f0       	breq	.+2      	; 0x6da <DIO_init+0x80>
 6d8:	54 c0       	rjmp	.+168    	; 0x782 <DIO_init+0x128>
				DDRB |= (1<<pinNumber);  // output
 6da:	47 b3       	in	r20, 0x17	; 23
 6dc:	21 e0       	ldi	r18, 0x01	; 1
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	b9 01       	movw	r22, r18
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_init+0x8e>
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	8a 95       	dec	r24
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_init+0x8a>
 6ec:	cb 01       	movw	r24, r22
 6ee:	84 2b       	or	r24, r20
 6f0:	87 bb       	out	0x17, r24	; 23
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	08 95       	ret
			else{
				return WRONG_DIRECTION;
			}
			break;
		case PORT_C:
			if(direction == INPUT){
 6f6:	41 11       	cpse	r20, r1
 6f8:	0f c0       	rjmp	.+30     	; 0x718 <DIO_init+0xbe>
				DDRC &= ~(1<<pinNumber); // input
 6fa:	44 b3       	in	r20, 0x14	; 20
 6fc:	21 e0       	ldi	r18, 0x01	; 1
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	b9 01       	movw	r22, r18
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_init+0xae>
 704:	66 0f       	add	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	8a 95       	dec	r24
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_init+0xaa>
 70c:	cb 01       	movw	r24, r22
 70e:	80 95       	com	r24
 710:	84 23       	and	r24, r20
 712:	84 bb       	out	0x14, r24	; 20
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	08 95       	ret
			break;
		case PORT_C:
			if(direction == INPUT){
				DDRC &= ~(1<<pinNumber); // input
			}
			else if(direction == OUTPUT){
 718:	41 30       	cpi	r20, 0x01	; 1
 71a:	a9 f5       	brne	.+106    	; 0x786 <DIO_init+0x12c>
				DDRC |= (1<<pinNumber);  // output
 71c:	44 b3       	in	r20, 0x14	; 20
 71e:	21 e0       	ldi	r18, 0x01	; 1
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	b9 01       	movw	r22, r18
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_init+0xd0>
 726:	66 0f       	add	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	8a 95       	dec	r24
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_init+0xcc>
 72e:	cb 01       	movw	r24, r22
 730:	84 2b       	or	r24, r20
 732:	84 bb       	out	0x14, r24	; 20
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	08 95       	ret
			else{
				return WRONG_DIRECTION;
			}
			break;
		case PORT_D:
			if(direction == INPUT){
 738:	41 11       	cpse	r20, r1
 73a:	0f c0       	rjmp	.+30     	; 0x75a <DIO_init+0x100>
				DDRD &= ~(1<<pinNumber); // input
 73c:	41 b3       	in	r20, 0x11	; 17
 73e:	21 e0       	ldi	r18, 0x01	; 1
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	b9 01       	movw	r22, r18
 744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_init+0xf0>
 746:	66 0f       	add	r22, r22
 748:	77 1f       	adc	r23, r23
 74a:	8a 95       	dec	r24
 74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_init+0xec>
 74e:	cb 01       	movw	r24, r22
 750:	80 95       	com	r24
 752:	84 23       	and	r24, r20
 754:	81 bb       	out	0x11, r24	; 17
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	08 95       	ret
			break;
		case PORT_D:
			if(direction == INPUT){
				DDRD &= ~(1<<pinNumber); // input
			}
			else if(direction == OUTPUT){
 75a:	41 30       	cpi	r20, 0x01	; 1
 75c:	b1 f4       	brne	.+44     	; 0x78a <DIO_init+0x130>
				DDRD |= (1<<pinNumber);
 75e:	41 b3       	in	r20, 0x11	; 17
 760:	21 e0       	ldi	r18, 0x01	; 1
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	b9 01       	movw	r22, r18
 766:	02 c0       	rjmp	.+4      	; 0x76c <DIO_init+0x112>
 768:	66 0f       	add	r22, r22
 76a:	77 1f       	adc	r23, r23
 76c:	8a 95       	dec	r24
 76e:	e2 f7       	brpl	.-8      	; 0x768 <DIO_init+0x10e>
 770:	cb 01       	movw	r24, r22
 772:	84 2b       	or	r24, r20
 774:	81 bb       	out	0x11, r24	; 17
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	08 95       	ret
			else{
				return WRONG_DIRECTION;
			}
			break;
		default:
			return WRONG_PORT;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	08 95       	ret
			}
			else if(direction == OUTPUT){
				DDRA |= (1<<pinNumber);  // output
			}
			else{
				return WRONG_DIRECTION;
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	08 95       	ret
			}
			else if(direction == OUTPUT){
				DDRB |= (1<<pinNumber);  // output
			}
			else{
				return WRONG_DIRECTION;
 782:	83 e0       	ldi	r24, 0x03	; 3
 784:	08 95       	ret
			}
			else if(direction == OUTPUT){
				DDRC |= (1<<pinNumber);  // output
			}
			else{
				return WRONG_DIRECTION;
 786:	83 e0       	ldi	r24, 0x03	; 3
 788:	08 95       	ret
			}
			else if(direction == OUTPUT){
				DDRD |= (1<<pinNumber);
			}
			else{
				return WRONG_DIRECTION;
 78a:	83 e0       	ldi	r24, 0x03	; 3
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
}
 78c:	08 95       	ret

0000078e <DIO_write>:

DIO_ERR DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value){
	switch (portNumber){
 78e:	61 30       	cpi	r22, 0x01	; 1
 790:	51 f1       	breq	.+84     	; 0x7e6 <DIO_write+0x58>
 792:	38 f0       	brcs	.+14     	; 0x7a2 <DIO_write+0x14>
 794:	62 30       	cpi	r22, 0x02	; 2
 796:	09 f4       	brne	.+2      	; 0x79a <DIO_write+0xc>
 798:	48 c0       	rjmp	.+144    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 79a:	63 30       	cpi	r22, 0x03	; 3
 79c:	09 f4       	brne	.+2      	; 0x7a0 <DIO_write+0x12>
 79e:	66 c0       	rjmp	.+204    	; 0x86c <__stack+0xd>
 7a0:	86 c0       	rjmp	.+268    	; 0x8ae <__stack+0x4f>
		
		case PORT_A:
			if(value == LOW){
 7a2:	41 11       	cpse	r20, r1
 7a4:	0f c0       	rjmp	.+30     	; 0x7c4 <DIO_write+0x36>
				PORTA &= ~(1<<pinNumber); // LOW
 7a6:	4b b3       	in	r20, 0x1b	; 27
 7a8:	21 e0       	ldi	r18, 0x01	; 1
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	b9 01       	movw	r22, r18
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_write+0x26>
 7b0:	66 0f       	add	r22, r22
 7b2:	77 1f       	adc	r23, r23
 7b4:	8a 95       	dec	r24
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_write+0x22>
 7b8:	cb 01       	movw	r24, r22
 7ba:	80 95       	com	r24
 7bc:	84 23       	and	r24, r20
 7be:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	08 95       	ret
		
		case PORT_A:
			if(value == LOW){
				PORTA &= ~(1<<pinNumber); // LOW
			}
			else if(value == HIGH){
 7c4:	41 30       	cpi	r20, 0x01	; 1
 7c6:	09 f0       	breq	.+2      	; 0x7ca <DIO_write+0x3c>
 7c8:	74 c0       	rjmp	.+232    	; 0x8b2 <__stack+0x53>
				PORTA |= (1<<pinNumber); // HIGH
 7ca:	4b b3       	in	r20, 0x1b	; 27
 7cc:	21 e0       	ldi	r18, 0x01	; 1
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	b9 01       	movw	r22, r18
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_write+0x4a>
 7d4:	66 0f       	add	r22, r22
 7d6:	77 1f       	adc	r23, r23
 7d8:	8a 95       	dec	r24
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_write+0x46>
 7dc:	cb 01       	movw	r24, r22
 7de:	84 2b       	or	r24, r20
 7e0:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	08 95       	ret
			else{
				return WRONG_VALUE;
			}
			break;
		case PORT_B:
			if(value == LOW){
 7e6:	41 11       	cpse	r20, r1
 7e8:	0f c0       	rjmp	.+30     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
				PORTB &= ~(1<<pinNumber); // LOW
 7ea:	48 b3       	in	r20, 0x18	; 24
 7ec:	21 e0       	ldi	r18, 0x01	; 1
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	b9 01       	movw	r22, r18
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_write+0x6a>
 7f4:	66 0f       	add	r22, r22
 7f6:	77 1f       	adc	r23, r23
 7f8:	8a 95       	dec	r24
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_write+0x66>
 7fc:	cb 01       	movw	r24, r22
 7fe:	80 95       	com	r24
 800:	84 23       	and	r24, r20
 802:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	08 95       	ret
			break;
		case PORT_B:
			if(value == LOW){
				PORTB &= ~(1<<pinNumber); // LOW
			}
			else if(value == HIGH){
 808:	41 30       	cpi	r20, 0x01	; 1
 80a:	09 f0       	breq	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80c:	54 c0       	rjmp	.+168    	; 0x8b6 <__stack+0x57>
				PORTB |= (1<<pinNumber); // HIGH
 80e:	48 b3       	in	r20, 0x18	; 24
 810:	21 e0       	ldi	r18, 0x01	; 1
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	b9 01       	movw	r22, r18
 816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 818:	66 0f       	add	r22, r22
 81a:	77 1f       	adc	r23, r23
 81c:	8a 95       	dec	r24
 81e:	e2 f7       	brpl	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 820:	cb 01       	movw	r24, r22
 822:	84 2b       	or	r24, r20
 824:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	08 95       	ret
			else{
				return WRONG_VALUE;
			}
			break;
		case PORT_C:
			if(value == LOW){
 82a:	41 11       	cpse	r20, r1
 82c:	0f c0       	rjmp	.+30     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
				PORTC &= ~(1<<pinNumber); // LOW
 82e:	45 b3       	in	r20, 0x15	; 21
 830:	21 e0       	ldi	r18, 0x01	; 1
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	b9 01       	movw	r22, r18
 836:	02 c0       	rjmp	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 838:	66 0f       	add	r22, r22
 83a:	77 1f       	adc	r23, r23
 83c:	8a 95       	dec	r24
 83e:	e2 f7       	brpl	.-8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 840:	cb 01       	movw	r24, r22
 842:	80 95       	com	r24
 844:	84 23       	and	r24, r20
 846:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	08 95       	ret
			break;
		case PORT_C:
			if(value == LOW){
				PORTC &= ~(1<<pinNumber); // LOW
			}
			else if(value == HIGH){
 84c:	41 30       	cpi	r20, 0x01	; 1
 84e:	a9 f5       	brne	.+106    	; 0x8ba <__stack+0x5b>
				PORTC |= (1<<pinNumber);  // HIGH
 850:	45 b3       	in	r20, 0x15	; 21
 852:	21 e0       	ldi	r18, 0x01	; 1
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	b9 01       	movw	r22, r18
 858:	02 c0       	rjmp	.+4      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 85a:	66 0f       	add	r22, r22
 85c:	77 1f       	adc	r23, r23
 85e:	8a 95       	dec	r24
 860:	e2 f7       	brpl	.-8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 862:	cb 01       	movw	r24, r22
 864:	84 2b       	or	r24, r20
 866:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	08 95       	ret
			else{
				return WRONG_VALUE;
			}
			break;
		case PORT_D:
			if(value == LOW){
 86c:	41 11       	cpse	r20, r1
 86e:	0f c0       	rjmp	.+30     	; 0x88e <__stack+0x2f>
				PORTD &= ~(1<<pinNumber); // LOW
 870:	42 b3       	in	r20, 0x12	; 18
 872:	21 e0       	ldi	r18, 0x01	; 1
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	b9 01       	movw	r22, r18
 878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
 87a:	66 0f       	add	r22, r22
 87c:	77 1f       	adc	r23, r23
 87e:	8a 95       	dec	r24
 880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
 882:	cb 01       	movw	r24, r22
 884:	80 95       	com	r24
 886:	84 23       	and	r24, r20
 888:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	08 95       	ret
			break;
		case PORT_D:
			if(value == LOW){
				PORTD &= ~(1<<pinNumber); // LOW
			}
			else if(value == HIGH){
 88e:	41 30       	cpi	r20, 0x01	; 1
 890:	b1 f4       	brne	.+44     	; 0x8be <__stack+0x5f>
				PORTD |= (1<<pinNumber);  // HIGH
 892:	42 b3       	in	r20, 0x12	; 18
 894:	21 e0       	ldi	r18, 0x01	; 1
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	b9 01       	movw	r22, r18
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__stack+0x41>
 89c:	66 0f       	add	r22, r22
 89e:	77 1f       	adc	r23, r23
 8a0:	8a 95       	dec	r24
 8a2:	e2 f7       	brpl	.-8      	; 0x89c <__stack+0x3d>
 8a4:	cb 01       	movw	r24, r22
 8a6:	84 2b       	or	r24, r20
 8a8:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	08 95       	ret
			else{
				return WRONG_VALUE;
			}
			break;
		default:
			return WRONG_PORT;
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	08 95       	ret
			}
			else if(value == HIGH){
				PORTA |= (1<<pinNumber); // HIGH
			}
			else{
				return WRONG_VALUE;
 8b2:	84 e0       	ldi	r24, 0x04	; 4
 8b4:	08 95       	ret
			}
			else if(value == HIGH){
				PORTB |= (1<<pinNumber); // HIGH
			}
			else{
				return WRONG_VALUE;
 8b6:	84 e0       	ldi	r24, 0x04	; 4
 8b8:	08 95       	ret
			}
			else if(value == HIGH){
				PORTC |= (1<<pinNumber);  // HIGH
			}
			else{
				return WRONG_VALUE;
 8ba:	84 e0       	ldi	r24, 0x04	; 4
 8bc:	08 95       	ret
			}
			else if(value == HIGH){
				PORTD |= (1<<pinNumber);  // HIGH
			}
			else{
				return WRONG_VALUE;
 8be:	84 e0       	ldi	r24, 0x04	; 4
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
}
 8c0:	08 95       	ret

000008c2 <DIO_read>:
	DIO_read(pinNumber, portNumber, &value);
	return DIO_write(pinNumber, portNumber, !value);
}

DIO_ERR DIO_read(uint8_t pinNumber, uint8_t portNumber, uint8_t *value){
	switch (portNumber)
 8c2:	61 30       	cpi	r22, 0x01	; 1
 8c4:	f9 f0       	breq	.+62     	; 0x904 <DIO_read+0x42>
 8c6:	30 f0       	brcs	.+12     	; 0x8d4 <DIO_read+0x12>
 8c8:	62 30       	cpi	r22, 0x02	; 2
 8ca:	a1 f1       	breq	.+104    	; 0x934 <DIO_read+0x72>
 8cc:	63 30       	cpi	r22, 0x03	; 3
 8ce:	09 f4       	brne	.+2      	; 0x8d2 <DIO_read+0x10>
 8d0:	49 c0       	rjmp	.+146    	; 0x964 <DIO_read+0xa2>
 8d2:	60 c0       	rjmp	.+192    	; 0x994 <DIO_read+0xd2>
	{
		case PORT_A:
			*value = (PINA & (1<<pinNumber)) >> pinNumber;
 8d4:	99 b3       	in	r25, 0x19	; 25
 8d6:	21 e0       	ldi	r18, 0x01	; 1
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	b9 01       	movw	r22, r18
 8dc:	08 2e       	mov	r0, r24
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <DIO_read+0x22>
 8e0:	66 0f       	add	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	0a 94       	dec	r0
 8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <DIO_read+0x1e>
 8e8:	29 2f       	mov	r18, r25
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	26 23       	and	r18, r22
 8ee:	37 23       	and	r19, r23
 8f0:	b9 01       	movw	r22, r18
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <DIO_read+0x36>
 8f4:	75 95       	asr	r23
 8f6:	67 95       	ror	r22
 8f8:	8a 95       	dec	r24
 8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <DIO_read+0x32>
 8fc:	fa 01       	movw	r30, r20
 8fe:	60 83       	st	Z, r22
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 900:	80 e0       	ldi	r24, 0x00	; 0
DIO_ERR DIO_read(uint8_t pinNumber, uint8_t portNumber, uint8_t *value){
	switch (portNumber)
	{
		case PORT_A:
			*value = (PINA & (1<<pinNumber)) >> pinNumber;
			break;	
 902:	08 95       	ret
		case PORT_B:
			*value = (PINB & (1<<pinNumber)) >> pinNumber;
 904:	96 b3       	in	r25, 0x16	; 22
 906:	21 e0       	ldi	r18, 0x01	; 1
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	b9 01       	movw	r22, r18
 90c:	08 2e       	mov	r0, r24
 90e:	02 c0       	rjmp	.+4      	; 0x914 <DIO_read+0x52>
 910:	66 0f       	add	r22, r22
 912:	77 1f       	adc	r23, r23
 914:	0a 94       	dec	r0
 916:	e2 f7       	brpl	.-8      	; 0x910 <DIO_read+0x4e>
 918:	29 2f       	mov	r18, r25
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	26 23       	and	r18, r22
 91e:	37 23       	and	r19, r23
 920:	b9 01       	movw	r22, r18
 922:	02 c0       	rjmp	.+4      	; 0x928 <DIO_read+0x66>
 924:	75 95       	asr	r23
 926:	67 95       	ror	r22
 928:	8a 95       	dec	r24
 92a:	e2 f7       	brpl	.-8      	; 0x924 <DIO_read+0x62>
 92c:	fa 01       	movw	r30, r20
 92e:	60 83       	st	Z, r22
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 930:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_A:
			*value = (PINA & (1<<pinNumber)) >> pinNumber;
			break;	
		case PORT_B:
			*value = (PINB & (1<<pinNumber)) >> pinNumber;
			break;
 932:	08 95       	ret
		case PORT_C:
			*value = (PINC & (1<<pinNumber)) >> pinNumber;
 934:	93 b3       	in	r25, 0x13	; 19
 936:	21 e0       	ldi	r18, 0x01	; 1
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	b9 01       	movw	r22, r18
 93c:	08 2e       	mov	r0, r24
 93e:	02 c0       	rjmp	.+4      	; 0x944 <DIO_read+0x82>
 940:	66 0f       	add	r22, r22
 942:	77 1f       	adc	r23, r23
 944:	0a 94       	dec	r0
 946:	e2 f7       	brpl	.-8      	; 0x940 <DIO_read+0x7e>
 948:	29 2f       	mov	r18, r25
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	26 23       	and	r18, r22
 94e:	37 23       	and	r19, r23
 950:	b9 01       	movw	r22, r18
 952:	02 c0       	rjmp	.+4      	; 0x958 <DIO_read+0x96>
 954:	75 95       	asr	r23
 956:	67 95       	ror	r22
 958:	8a 95       	dec	r24
 95a:	e2 f7       	brpl	.-8      	; 0x954 <DIO_read+0x92>
 95c:	fa 01       	movw	r30, r20
 95e:	60 83       	st	Z, r22
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 960:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_B:
			*value = (PINB & (1<<pinNumber)) >> pinNumber;
			break;
		case PORT_C:
			*value = (PINC & (1<<pinNumber)) >> pinNumber;
			break;
 962:	08 95       	ret
		case PORT_D:
			*value = (PIND & (1<<pinNumber)) >> pinNumber;
 964:	90 b3       	in	r25, 0x10	; 16
 966:	21 e0       	ldi	r18, 0x01	; 1
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	b9 01       	movw	r22, r18
 96c:	08 2e       	mov	r0, r24
 96e:	02 c0       	rjmp	.+4      	; 0x974 <DIO_read+0xb2>
 970:	66 0f       	add	r22, r22
 972:	77 1f       	adc	r23, r23
 974:	0a 94       	dec	r0
 976:	e2 f7       	brpl	.-8      	; 0x970 <DIO_read+0xae>
 978:	29 2f       	mov	r18, r25
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	26 23       	and	r18, r22
 97e:	37 23       	and	r19, r23
 980:	b9 01       	movw	r22, r18
 982:	02 c0       	rjmp	.+4      	; 0x988 <DIO_read+0xc6>
 984:	75 95       	asr	r23
 986:	67 95       	ror	r22
 988:	8a 95       	dec	r24
 98a:	e2 f7       	brpl	.-8      	; 0x984 <DIO_read+0xc2>
 98c:	fa 01       	movw	r30, r20
 98e:	60 83       	st	Z, r22
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 990:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_C:
			*value = (PINC & (1<<pinNumber)) >> pinNumber;
			break;
		case PORT_D:
			*value = (PIND & (1<<pinNumber)) >> pinNumber;
			break;
 992:	08 95       	ret
		default:
			return WRONG_PORT;
 994:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return DIO_OK;
 996:	08 95       	ret

00000998 <DIO_toggle>:
			break;
	}
	return DIO_OK;
}

DIO_ERR DIO_toggle(uint8_t pinNumber, uint8_t portNumber){
 998:	0f 93       	push	r16
 99a:	1f 93       	push	r17
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
 9a0:	1f 92       	push	r1
 9a2:	cd b7       	in	r28, 0x3d	; 61
 9a4:	de b7       	in	r29, 0x3e	; 62
 9a6:	18 2f       	mov	r17, r24
 9a8:	06 2f       	mov	r16, r22
	uint8_t value;
	DIO_read(pinNumber, portNumber, &value);
 9aa:	ae 01       	movw	r20, r28
 9ac:	4f 5f       	subi	r20, 0xFF	; 255
 9ae:	5f 4f       	sbci	r21, 0xFF	; 255
 9b0:	0e 94 61 04 	call	0x8c2	; 0x8c2 <DIO_read>
	return DIO_write(pinNumber, portNumber, !value);
 9b4:	41 e0       	ldi	r20, 0x01	; 1
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
 9b8:	81 11       	cpse	r24, r1
 9ba:	40 e0       	ldi	r20, 0x00	; 0
 9bc:	60 2f       	mov	r22, r16
 9be:	81 2f       	mov	r24, r17
 9c0:	0e 94 c7 03 	call	0x78e	; 0x78e <DIO_write>
}
 9c4:	0f 90       	pop	r0
 9c6:	df 91       	pop	r29
 9c8:	cf 91       	pop	r28
 9ca:	1f 91       	pop	r17
 9cc:	0f 91       	pop	r16
 9ce:	08 95       	ret

000009d0 <EXT_INT_0_FALLING_init>:

#include "interrupt.h"

INT_ERR EXT_INT_0_FALLING_init(){
	// ISC01 = 1, ISC00 = 0, detect falling edge
	MCUCR |= (1<<1);
 9d0:	85 b7       	in	r24, 0x35	; 53
 9d2:	82 60       	ori	r24, 0x02	; 2
 9d4:	85 bf       	out	0x35, r24	; 53
	//MCUCR = 0x00;
	// enable EXT_INT_0
	GICR |= (1<<6);
 9d6:	8b b7       	in	r24, 0x3b	; 59
 9d8:	80 64       	ori	r24, 0x40	; 64
 9da:	8b bf       	out	0x3b, r24	; 59
	return INT_OK;
}
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	08 95       	ret

000009e0 <MILLIS_init>:
uint8_t volatile numberOfOverflows = 0;
unsigned long volatile ms = 0;

// works on timer 2 overflow
MILIS_ERR MILLIS_init(){
	TCCR2 = 0x00; // timer2 normal mode
 9e0:	15 bc       	out	0x25, r1	; 37
	TCNT2 = 6; // timer2 initial value = 6(calculated)
 9e2:	86 e0       	ldi	r24, 0x06	; 6
 9e4:	84 bd       	out	0x24, r24	; 36
	TCCR2 |= (1<<0); // start timer
 9e6:	85 b5       	in	r24, 0x25	; 37
 9e8:	81 60       	ori	r24, 0x01	; 1
 9ea:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << 6); // TOIE2 = 1 enable overflow interrupt ISR
 9ec:	89 b7       	in	r24, 0x39	; 57
 9ee:	80 64       	ori	r24, 0x40	; 64
 9f0:	89 bf       	out	0x39, r24	; 57
	return MILLIS_OK;
}
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	08 95       	ret

000009f6 <millis>:

// return time from the beginning in milli seconds
unsigned long millis(){
	return ms;
 9f6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 9fa:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 9fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 a02:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
}
 a06:	08 95       	ret

00000a08 <__vector_5>:

// each 4 overflows = 1ms
ISR(TIMMER_OVF_INT_1){
 a08:	1f 92       	push	r1
 a0a:	0f 92       	push	r0
 a0c:	0f b6       	in	r0, 0x3f	; 63
 a0e:	0f 92       	push	r0
 a10:	11 24       	eor	r1, r1
 a12:	8f 93       	push	r24
 a14:	9f 93       	push	r25
 a16:	af 93       	push	r26
 a18:	bf 93       	push	r27
	TCNT2 = 6; // overflows each 256-6= 250us
 a1a:	86 e0       	ldi	r24, 0x06	; 6
 a1c:	84 bd       	out	0x24, r24	; 36
	numberOfOverflows++; // overflow tracker
 a1e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <numberOfOverflows>
 a22:	8f 5f       	subi	r24, 0xFF	; 255
 a24:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <numberOfOverflows>
	if(numberOfOverflows == 4){ // 4 overflows = 1ms
 a28:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <numberOfOverflows>
 a2c:	84 30       	cpi	r24, 0x04	; 4
 a2e:	a9 f4       	brne	.+42     	; 0xa5a <__vector_5+0x52>
		numberOfOverflows = 0; // start counting from 0
 a30:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <numberOfOverflows>
		ms++; // time counter
 a34:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 a38:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 a3c:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 a40:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 a44:	01 96       	adiw	r24, 0x01	; 1
 a46:	a1 1d       	adc	r26, r1
 a48:	b1 1d       	adc	r27, r1
 a4a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 a4e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 a52:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 a56:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	}
 a5a:	bf 91       	pop	r27
 a5c:	af 91       	pop	r26
 a5e:	9f 91       	pop	r25
 a60:	8f 91       	pop	r24
 a62:	0f 90       	pop	r0
 a64:	0f be       	out	0x3f, r0	; 63
 a66:	0f 90       	pop	r0
 a68:	1f 90       	pop	r1
 a6a:	18 95       	reti

00000a6c <__tablejump2__>:
 a6c:	ee 0f       	add	r30, r30
 a6e:	ff 1f       	adc	r31, r31
 a70:	05 90       	lpm	r0, Z+
 a72:	f4 91       	lpm	r31, Z
 a74:	e0 2d       	mov	r30, r0
 a76:	09 94       	ijmp

00000a78 <_exit>:
 a78:	f8 94       	cli

00000a7a <__stop_program>:
 a7a:	ff cf       	rjmp	.-2      	; 0xa7a <__stop_program>
