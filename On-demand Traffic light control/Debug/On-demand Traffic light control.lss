
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a82  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000af6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800060  00800060  00000af6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001461  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000952  00000000  00000000  0000210d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c16  00000000  00000000  00002a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00003678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000644  00000000  00000000  00003890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae5  00000000  00000000  00003ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000049b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	13 01       	movw	r2, r6
  56:	1d 01       	movw	r2, r26
  58:	52 01       	movw	r10, r4
  5a:	69 01       	movw	r12, r18
  5c:	a0 01       	movw	r20, r0
  5e:	fd 01       	movw	r30, r26
  60:	2c 02       	muls	r18, r28
  62:	07 01       	movw	r0, r14
  64:	76 02       	muls	r23, r22
  66:	c6 02       	muls	r28, r22

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 37       	cpi	r26, 0x75	; 117
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 29 03 	call	0x652	; 0x652 <main>
  88:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
#define YELLOW_SIGN_WAIT_TIME 250 // ms 

unsigned long volatile buttonCounter;
uint8_t  buttonState;
// BUTTON, PORTD2, FALING
ISR(EXT_INT_0){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	if(currentState == C_GREEN
  9c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	41 f0       	breq	.+16     	; 0xb4 <__vector_1+0x24>
	|| currentState == C_YELLOW
  a4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
  a8:	84 30       	cpi	r24, 0x04	; 4
  aa:	21 f0       	breq	.+8      	; 0xb4 <__vector_1+0x24>
	|| currentState == C_RED){
  ac:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
  b0:	85 30       	cpi	r24, 0x05	; 5
  b2:	39 f4       	brne	.+14     	; 0xc2 <__vector_1+0x32>
		nextState = PEDESTRIAN;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
		prevState = currentState;
  ba:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
  be:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
	}
}
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <carsCurretLED>:
		}
	}
}

void carsCurretLED(uint8_t color){
	switch(color){
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	f9 f0       	breq	.+62     	; 0x110 <carsCurretLED+0x42>
  d2:	88 f0       	brcs	.+34     	; 0xf6 <carsCurretLED+0x28>
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	49 f1       	breq	.+82     	; 0x12a <carsCurretLED+0x5c>
  d8:	83 30       	cpi	r24, 0x03	; 3
  da:	99 f5       	brne	.+102    	; 0x142 <carsCurretLED+0x74>
		case OFF:
			LED_off(C_GREEN_LED_PIN, C_LEDS_PORT);
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			LED_off(C_YELLOW_LED_PIN, C_LEDS_PORT);
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			LED_off(C_RED_LED_PIN, C_LEDS_PORT);
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			break;
  f4:	08 95       	ret
		case GREEN:
			LED_on(C_GREEN_LED_PIN, C_LEDS_PORT);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 1e 03 	call	0x63c	; 0x63c <LED_on>
			LED_off(C_YELLOW_LED_PIN, C_LEDS_PORT);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			LED_off(C_RED_LED_PIN, C_LEDS_PORT);
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			break;
 10e:	08 95       	ret
		case YELLOW:
			LED_off(C_GREEN_LED_PIN, C_LEDS_PORT);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			LED_toggle(C_YELLOW_LED_PIN, C_LEDS_PORT);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 26 03 	call	0x64c	; 0x64c <LED_toggle>
			LED_off(C_RED_LED_PIN, C_LEDS_PORT);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			break;
 128:	08 95       	ret
		case RED:
			LED_off(C_GREEN_LED_PIN, C_LEDS_PORT);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			LED_off(C_YELLOW_LED_PIN, C_LEDS_PORT);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			LED_on(C_RED_LED_PIN, C_LEDS_PORT);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 1e 03 	call	0x63c	; 0x63c <LED_on>
 142:	08 95       	ret

00000144 <pedestriansCurretLED>:
	}
}


void pedestriansCurretLED(uint8_t color){
	switch(color){
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	f9 f0       	breq	.+62     	; 0x186 <pedestriansCurretLED+0x42>
 148:	88 f0       	brcs	.+34     	; 0x16c <pedestriansCurretLED+0x28>
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	49 f1       	breq	.+82     	; 0x1a0 <pedestriansCurretLED+0x5c>
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	99 f5       	brne	.+102    	; 0x1b8 <pedestriansCurretLED+0x74>
		case OFF:
			LED_off(P_GREEN_LED_PIN, P_LEDS_PORT);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			LED_off(P_YELLOW_LED_PIN, P_LEDS_PORT);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			LED_off(P_RED_LED_PIN, P_LEDS_PORT);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			break;
 16a:	08 95       	ret
		case GREEN:
			LED_on(P_GREEN_LED_PIN, P_LEDS_PORT);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 1e 03 	call	0x63c	; 0x63c <LED_on>
			LED_off(P_YELLOW_LED_PIN, P_LEDS_PORT);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			LED_off(P_RED_LED_PIN, P_LEDS_PORT);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			break;
 184:	08 95       	ret
		case YELLOW:
			LED_off(P_GREEN_LED_PIN, P_LEDS_PORT);
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			LED_toggle(P_YELLOW_LED_PIN, P_LEDS_PORT);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 26 03 	call	0x64c	; 0x64c <LED_toggle>
			LED_off(P_RED_LED_PIN, P_LEDS_PORT);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			break;
 19e:	08 95       	ret
		case RED:
			LED_off(P_GREEN_LED_PIN, P_LEDS_PORT);
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			LED_off(P_YELLOW_LED_PIN, P_LEDS_PORT);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 22 03 	call	0x644	; 0x644 <LED_off>
			LED_on(P_RED_LED_PIN, P_LEDS_PORT);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 1e 03 	call	0x63c	; 0x63c <LED_on>
 1b8:	08 95       	ret

000001ba <APP_init>:
}

void APP_init(){
	
	//1.init Pedestrian leds
	LED_init(P_GREEN_LED_PIN, P_LEDS_PORT);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 1a 03 	call	0x634	; 0x634 <LED_init>
	LED_init(P_YELLOW_LED_PIN, P_LEDS_PORT);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 1a 03 	call	0x634	; 0x634 <LED_init>
	LED_init(P_RED_LED_PIN, P_LEDS_PORT);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 1a 03 	call	0x634	; 0x634 <LED_init>
	pedestriansCurretLED(OFF);
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
	
	//2.init Cars leds
	LED_init(C_GREEN_LED_PIN, C_LEDS_PORT);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 1a 03 	call	0x634	; 0x634 <LED_init>
	LED_init(C_YELLOW_LED_PIN, C_LEDS_PORT);
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 1a 03 	call	0x634	; 0x634 <LED_init>
	LED_init(C_RED_LED_PIN, C_LEDS_PORT);
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 1a 03 	call	0x634	; 0x634 <LED_init>
	carsCurretLED(OFF);
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
	
	//3.init button
	BUTTON_init(P_BUTTON_PIN, P_BUTTON_PORT);
 1f6:	63 e0       	ldi	r22, 0x03	; 3
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	0e 94 16 03 	call	0x62c	; 0x62c <BUTTON_init>
	
	//4.enable global interrupt
	sei(); 
 1fe:	78 94       	sei
	
	//5.enable external interrupter 0 PORTD2
	EXT_INT_0_FALLING_init();
 200:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <EXT_INT_0_FALLING_init>
	
	//6.timer 2 INT
	MILLIS_init();
 204:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <MILLIS_init>
	
	//7.state init
	nextState = START;	
 208:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <nextState>
 20c:	08 95       	ret

0000020e <APP_start>:
}

void APP_start(){
	
	while(1){		
		switch(nextState){
 20e:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <nextState>
 212:	8e 2f       	mov	r24, r30
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	8a 30       	cpi	r24, 0x0A	; 10
 218:	91 05       	cpc	r25, r1
 21a:	c8 f7       	brcc	.-14     	; 0x20e <APP_start>
 21c:	fc 01       	movw	r30, r24
 21e:	e6 5d       	subi	r30, 0xD6	; 214
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__tablejump2__>
			case START:
				currentState = START;
 226:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <currentState>
				prevState = currentState;
 22a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 22e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
				nextState = NORMAL_MODE;
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
				break;
 238:	ea cf       	rjmp	.-44     	; 0x20e <APP_start>
				
			case PEDESTRIAN:
				currentState = PEDESTRIAN;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				if((prevState == C_RED)){
 240:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 244:	85 30       	cpi	r24, 0x05	; 5
 246:	21 f4       	brne	.+8      	; 0x250 <APP_start+0x42>
					nextState = P_CR_PG;
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
 24e:	1b c0       	rjmp	.+54     	; 0x286 <APP_start+0x78>
				}
				else if((prevState == C_GREEN) || (prevState == C_YELLOW)){
 250:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	21 f0       	breq	.+8      	; 0x260 <APP_start+0x52>
 258:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 25c:	84 30       	cpi	r24, 0x04	; 4
 25e:	99 f4       	brne	.+38     	; 0x286 <APP_start+0x78>
					nextState = P_PR_BOTH_Y_BLINK;
 260:	89 e0       	ldi	r24, 0x09	; 9
 262:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
					carsCurretLED(OFF); // sync both leds
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
					pedestriansCurretLED(OFF);  // sync both leds
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
					yellowTimeCounter = millis();
 272:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 276:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <yellowTimeCounter>
 27a:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <yellowTimeCounter+0x1>
 27e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <yellowTimeCounter+0x2>
 282:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <yellowTimeCounter+0x3>
				}
				prevState = currentState;
 286:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 28a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
				timeCounter = millis();
 28e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 292:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 296:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 29a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 29e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
				break;
 2a2:	b5 cf       	rjmp	.-150    	; 0x20e <APP_start>
				
			case NORMAL_MODE:
				currentState = NORMAL_MODE;
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				prevState = currentState;
 2aa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 2ae:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
				nextState = C_GREEN;
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
				pedestriansCurretLED(OFF);
 2b8:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
				timeCounter = millis();
 2bc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 2c0:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 2c4:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 2c8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 2cc:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
				break;
 2d0:	9e cf       	rjmp	.-196    	; 0x20e <APP_start>
				
			case C_GREEN:
				currentState = C_GREEN;
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				carsCurretLED(GREEN);
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
				pedestriansCurretLED(RED);
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
				if(millis() >= timeCounter + SIGN_WAIT_TIME){
 2e4:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 2e8:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <timeCounter>
 2ec:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <timeCounter+0x1>
 2f0:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <timeCounter+0x2>
 2f4:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <timeCounter+0x3>
 2f8:	08 57       	subi	r16, 0x78	; 120
 2fa:	1c 4e       	sbci	r17, 0xEC	; 236
 2fc:	2f 4f       	sbci	r18, 0xFF	; 255
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
 300:	60 17       	cp	r22, r16
 302:	71 07       	cpc	r23, r17
 304:	82 07       	cpc	r24, r18
 306:	93 07       	cpc	r25, r19
 308:	08 f4       	brcc	.+2      	; 0x30c <APP_start+0xfe>
 30a:	81 cf       	rjmp	.-254    	; 0x20e <APP_start>
					timeCounter = millis();
 30c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 310:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 314:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 318:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 31c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
					yellowTimeCounter = timeCounter;
 320:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <yellowTimeCounter>
 324:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <yellowTimeCounter+0x1>
 328:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <yellowTimeCounter+0x2>
 32c:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <yellowTimeCounter+0x3>
					//if((prevState == NORMAL_MODE) || (prevState == YELLOW)){
						nextState = C_YELLOW;
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
						prevState = currentState;
 336:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 33a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 33e:	67 cf       	rjmp	.-306    	; 0x20e <APP_start>
					//}
				}
				break;
			case C_YELLOW:
				currentState = C_YELLOW;
 340:	84 e0       	ldi	r24, 0x04	; 4
 342:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				// Blink YELLOW code
				if(millis() >= yellowTimeCounter + YELLOW_SIGN_WAIT_TIME){
 346:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 34a:	00 91 70 00 	lds	r16, 0x0070	; 0x800070 <yellowTimeCounter>
 34e:	10 91 71 00 	lds	r17, 0x0071	; 0x800071 <yellowTimeCounter+0x1>
 352:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <yellowTimeCounter+0x2>
 356:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <yellowTimeCounter+0x3>
 35a:	06 50       	subi	r16, 0x06	; 6
 35c:	1f 4f       	sbci	r17, 0xFF	; 255
 35e:	2f 4f       	sbci	r18, 0xFF	; 255
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	60 17       	cp	r22, r16
 364:	71 07       	cpc	r23, r17
 366:	82 07       	cpc	r24, r18
 368:	93 07       	cpc	r25, r19
 36a:	68 f0       	brcs	.+26     	; 0x386 <APP_start+0x178>
					yellowTimeCounter = millis();
 36c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 370:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <yellowTimeCounter>
 374:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <yellowTimeCounter+0x1>
 378:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <yellowTimeCounter+0x2>
 37c:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <yellowTimeCounter+0x3>
					carsCurretLED(YELLOW);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
					//pedestriansCurretLED(YELLOW);
				}
				pedestriansCurretLED(RED);
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
				
				if(millis() >= timeCounter + SIGN_WAIT_TIME){
 38c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 390:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <timeCounter>
 394:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <timeCounter+0x1>
 398:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <timeCounter+0x2>
 39c:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <timeCounter+0x3>
 3a0:	08 57       	subi	r16, 0x78	; 120
 3a2:	1c 4e       	sbci	r17, 0xEC	; 236
 3a4:	2f 4f       	sbci	r18, 0xFF	; 255
 3a6:	3f 4f       	sbci	r19, 0xFF	; 255
 3a8:	60 17       	cp	r22, r16
 3aa:	71 07       	cpc	r23, r17
 3ac:	82 07       	cpc	r24, r18
 3ae:	93 07       	cpc	r25, r19
 3b0:	08 f4       	brcc	.+2      	; 0x3b4 <APP_start+0x1a6>
 3b2:	2d cf       	rjmp	.-422    	; 0x20e <APP_start>
					timeCounter = millis();
 3b4:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 3b8:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 3bc:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 3c0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 3c4:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
					if((prevState == C_GREEN)){
 3c8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 3cc:	83 30       	cpi	r24, 0x03	; 3
 3ce:	41 f4       	brne	.+16     	; 0x3e0 <APP_start+0x1d2>
						nextState = C_RED;
 3d0:	85 e0       	ldi	r24, 0x05	; 5
 3d2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
						prevState = currentState;
 3d6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 3da:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 3de:	17 cf       	rjmp	.-466    	; 0x20e <APP_start>
					} else if((prevState == C_RED)){
 3e0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 3e4:	85 30       	cpi	r24, 0x05	; 5
 3e6:	09 f0       	breq	.+2      	; 0x3ea <APP_start+0x1dc>
 3e8:	12 cf       	rjmp	.-476    	; 0x20e <APP_start>
						nextState = C_GREEN;
 3ea:	83 e0       	ldi	r24, 0x03	; 3
 3ec:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
						prevState = currentState;
 3f0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 3f4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 3f8:	0a cf       	rjmp	.-492    	; 0x20e <APP_start>
					}
				}
				break;
				
			case C_RED:
				currentState = C_RED;
 3fa:	85 e0       	ldi	r24, 0x05	; 5
 3fc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				carsCurretLED(RED);
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
				pedestriansCurretLED(GREEN);
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
				if(millis() >= timeCounter + SIGN_WAIT_TIME){
 40c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 410:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <timeCounter>
 414:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <timeCounter+0x1>
 418:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <timeCounter+0x2>
 41c:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <timeCounter+0x3>
 420:	08 57       	subi	r16, 0x78	; 120
 422:	1c 4e       	sbci	r17, 0xEC	; 236
 424:	2f 4f       	sbci	r18, 0xFF	; 255
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	60 17       	cp	r22, r16
 42a:	71 07       	cpc	r23, r17
 42c:	82 07       	cpc	r24, r18
 42e:	93 07       	cpc	r25, r19
 430:	08 f4       	brcc	.+2      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 432:	ed ce       	rjmp	.-550    	; 0x20e <APP_start>
					timeCounter = millis();
 434:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 438:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 43c:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 440:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 444:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
					//if((prevState == NORMAL_MODE) || (prevState == YELLOW)){
					nextState = C_YELLOW;
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
					prevState = currentState;
 44e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 452:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 456:	db ce       	rjmp	.-586    	; 0x20e <APP_start>
					//}
				}
				break;
				
			case P_CR_PG:
				currentState = P_CR_PG;
 458:	86 e0       	ldi	r24, 0x06	; 6
 45a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				carsCurretLED(RED);
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
				pedestriansCurretLED(GREEN);
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
				if(millis() >= timeCounter + SIGN_WAIT_TIME){
 46a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 46e:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <timeCounter>
 472:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <timeCounter+0x1>
 476:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <timeCounter+0x2>
 47a:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <timeCounter+0x3>
 47e:	08 57       	subi	r16, 0x78	; 120
 480:	1c 4e       	sbci	r17, 0xEC	; 236
 482:	2f 4f       	sbci	r18, 0xFF	; 255
 484:	3f 4f       	sbci	r19, 0xFF	; 255
 486:	60 17       	cp	r22, r16
 488:	71 07       	cpc	r23, r17
 48a:	82 07       	cpc	r24, r18
 48c:	93 07       	cpc	r25, r19
 48e:	08 f4       	brcc	.+2      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 490:	be ce       	rjmp	.-644    	; 0x20e <APP_start>
					timeCounter = millis();
 492:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 496:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 49a:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 49e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 4a2:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
					if((prevState == PEDESTRIAN)){
 4a6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	41 f4       	brne	.+16     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
						nextState = NORMAL_MODE;
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
						prevState = currentState;
 4b4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 4b8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 4bc:	a8 ce       	rjmp	.-688    	; 0x20e <APP_start>
					}
					else if((prevState == P_PR_BOTH_Y_BLINK)){
 4be:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <prevState>
 4c2:	89 30       	cpi	r24, 0x09	; 9
 4c4:	09 f0       	breq	.+2      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4c6:	a3 ce       	rjmp	.-698    	; 0x20e <APP_start>
						nextState = P_PG_BOTH_Y_BLINK;
 4c8:	88 e0       	ldi	r24, 0x08	; 8
 4ca:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
						prevState = currentState;
 4ce:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 4d2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
						yellowTimeCounter = millis();
 4d6:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 4da:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <yellowTimeCounter>
 4de:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <yellowTimeCounter+0x1>
 4e2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <yellowTimeCounter+0x2>
 4e6:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <yellowTimeCounter+0x3>
 4ea:	91 ce       	rjmp	.-734    	; 0x20e <APP_start>
				
			case P_CG_PR:
				
				break;
			case P_PG_BOTH_Y_BLINK:
				currentState = P_PG_BOTH_Y_BLINK;
 4ec:	88 e0       	ldi	r24, 0x08	; 8
 4ee:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				//pedestriansCurretLED(GREEN);
				// Blink YELLOW code
				if(millis() >= yellowTimeCounter + YELLOW_SIGN_WAIT_TIME){
 4f2:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 4f6:	00 91 70 00 	lds	r16, 0x0070	; 0x800070 <yellowTimeCounter>
 4fa:	10 91 71 00 	lds	r17, 0x0071	; 0x800071 <yellowTimeCounter+0x1>
 4fe:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <yellowTimeCounter+0x2>
 502:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <yellowTimeCounter+0x3>
 506:	06 50       	subi	r16, 0x06	; 6
 508:	1f 4f       	sbci	r17, 0xFF	; 255
 50a:	2f 4f       	sbci	r18, 0xFF	; 255
 50c:	3f 4f       	sbci	r19, 0xFF	; 255
 50e:	60 17       	cp	r22, r16
 510:	71 07       	cpc	r23, r17
 512:	82 07       	cpc	r24, r18
 514:	93 07       	cpc	r25, r19
 516:	80 f0       	brcs	.+32     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
					yellowTimeCounter = millis();
 518:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 51c:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <yellowTimeCounter>
 520:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <yellowTimeCounter+0x1>
 524:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <yellowTimeCounter+0x2>
 528:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <yellowTimeCounter+0x3>
					carsCurretLED(YELLOW);
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
					pedestriansCurretLED(YELLOW);
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
				}
				LED_on(P_GREEN_LED_PIN,P_LEDS_PORT);
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	0e 94 1e 03 	call	0x63c	; 0x63c <LED_on>
				if(millis() >= timeCounter + SIGN_WAIT_TIME){
 540:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 544:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <timeCounter>
 548:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <timeCounter+0x1>
 54c:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <timeCounter+0x2>
 550:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <timeCounter+0x3>
 554:	08 57       	subi	r16, 0x78	; 120
 556:	1c 4e       	sbci	r17, 0xEC	; 236
 558:	2f 4f       	sbci	r18, 0xFF	; 255
 55a:	3f 4f       	sbci	r19, 0xFF	; 255
 55c:	60 17       	cp	r22, r16
 55e:	71 07       	cpc	r23, r17
 560:	82 07       	cpc	r24, r18
 562:	93 07       	cpc	r25, r19
 564:	08 f4       	brcc	.+2      	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 566:	53 ce       	rjmp	.-858    	; 0x20e <APP_start>
					timeCounter = millis();
 568:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 56c:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 570:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 574:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 578:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
					//if((prevState == NORMAL_MODE) || (prevState == YELLOW)){
					nextState = NORMAL_MODE;
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
					prevState = currentState;
 582:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 586:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 58a:	41 ce       	rjmp	.-894    	; 0x20e <APP_start>
					//}
				}
				break;
				
			case P_PR_BOTH_Y_BLINK:
				currentState = P_PR_BOTH_Y_BLINK;
 58c:	89 e0       	ldi	r24, 0x09	; 9
 58e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <currentState>
				//pedestriansCurretLED(RED);
				// Blink YELLOW code
				if(millis() >= yellowTimeCounter + YELLOW_SIGN_WAIT_TIME){
 592:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 596:	00 91 70 00 	lds	r16, 0x0070	; 0x800070 <yellowTimeCounter>
 59a:	10 91 71 00 	lds	r17, 0x0071	; 0x800071 <yellowTimeCounter+0x1>
 59e:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <yellowTimeCounter+0x2>
 5a2:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <yellowTimeCounter+0x3>
 5a6:	06 50       	subi	r16, 0x06	; 6
 5a8:	1f 4f       	sbci	r17, 0xFF	; 255
 5aa:	2f 4f       	sbci	r18, 0xFF	; 255
 5ac:	3f 4f       	sbci	r19, 0xFF	; 255
 5ae:	60 17       	cp	r22, r16
 5b0:	71 07       	cpc	r23, r17
 5b2:	82 07       	cpc	r24, r18
 5b4:	93 07       	cpc	r25, r19
 5b6:	80 f0       	brcs	.+32     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
					yellowTimeCounter = millis();
 5b8:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 5bc:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <yellowTimeCounter>
 5c0:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <yellowTimeCounter+0x1>
 5c4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <yellowTimeCounter+0x2>
 5c8:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <yellowTimeCounter+0x3>
					carsCurretLED(YELLOW);
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	0e 94 67 00 	call	0xce	; 0xce <carsCurretLED>
					pedestriansCurretLED(YELLOW);
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	0e 94 a2 00 	call	0x144	; 0x144 <pedestriansCurretLED>
				}
				LED_on(P_RED_LED_PIN, P_LEDS_PORT);
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	0e 94 1e 03 	call	0x63c	; 0x63c <LED_on>
				if(millis() >= timeCounter + SIGN_WAIT_TIME){
 5e0:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 5e4:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <timeCounter>
 5e8:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <timeCounter+0x1>
 5ec:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <timeCounter+0x2>
 5f0:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <timeCounter+0x3>
 5f4:	08 57       	subi	r16, 0x78	; 120
 5f6:	1c 4e       	sbci	r17, 0xEC	; 236
 5f8:	2f 4f       	sbci	r18, 0xFF	; 255
 5fa:	3f 4f       	sbci	r19, 0xFF	; 255
 5fc:	60 17       	cp	r22, r16
 5fe:	71 07       	cpc	r23, r17
 600:	82 07       	cpc	r24, r18
 602:	93 07       	cpc	r25, r19
 604:	08 f4       	brcc	.+2      	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
 606:	03 ce       	rjmp	.-1018   	; 0x20e <APP_start>
					timeCounter = millis();
 608:	0e 94 fe 04 	call	0x9fc	; 0x9fc <millis>
 60c:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <timeCounter>
 610:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <timeCounter+0x1>
 614:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter+0x2>
 618:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x3>
					//if((prevState == NORMAL_MODE) || (prevState == YELLOW)){
					nextState = P_CR_PG;
 61c:	86 e0       	ldi	r24, 0x06	; 6
 61e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <nextState>
					prevState = currentState;
 622:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <currentState>
 626:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <prevState>
 62a:	f1 cd       	rjmp	.-1054   	; 0x20e <APP_start>

0000062c <BUTTON_init>:
 */ 

#include "button.h"

DIO_ERR BUTTON_init(uint8_t pinNumber, uint8_t portNumber){
	return DIO_init(pinNumber, portNumber, INPUT);
 62c:	40 e0       	ldi	r20, 0x00	; 0
 62e:	0e 94 30 03 	call	0x660	; 0x660 <DIO_init>
}
 632:	08 95       	ret

00000634 <LED_init>:
 */ 

#include "led.h"

DIO_ERR LED_init(uint8_t ledPin, uint8_t ledPort){
	return DIO_init(ledPin, ledPort, OUTPUT);
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	0e 94 30 03 	call	0x660	; 0x660 <DIO_init>
}
 63a:	08 95       	ret

0000063c <LED_on>:

DIO_ERR LED_on(uint8_t ledPin, uint8_t ledPort){ // active HIGH
	return DIO_write(ledPin, ledPort, HIGH);
 63c:	41 e0       	ldi	r20, 0x01	; 1
 63e:	0e 94 ca 03 	call	0x794	; 0x794 <DIO_write>
}
 642:	08 95       	ret

00000644 <LED_off>:

DIO_ERR LED_off(uint8_t ledPin, uint8_t ledPort){ // active HIGH
	return DIO_write(ledPin, ledPort, LOW);
 644:	40 e0       	ldi	r20, 0x00	; 0
 646:	0e 94 ca 03 	call	0x794	; 0x794 <DIO_write>
}
 64a:	08 95       	ret

0000064c <LED_toggle>:

DIO_ERR LED_toggle(uint8_t ledPin, uint8_t ledPort){
	return DIO_toggle(ledPin, ledPort);
 64c:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_toggle>
 650:	08 95       	ret

00000652 <main>:

#include "Application/application.h"
//#include "TEST/test.h"

int main(void){
	APP_init();
 652:	0e 94 dd 00 	call	0x1ba	; 0x1ba <APP_init>
	APP_start();
 656:	0e 94 07 01 	call	0x20e	; 0x20e <APP_start>

	//test_millis_timer2();

	//test_button_led();

}
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	08 95       	ret

00000660 <DIO_init>:
#include "dio.h"


DIO_ERR DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction){
	
	switch (portNumber)
 660:	61 30       	cpi	r22, 0x01	; 1
 662:	51 f1       	breq	.+84     	; 0x6b8 <DIO_init+0x58>
 664:	38 f0       	brcs	.+14     	; 0x674 <DIO_init+0x14>
 666:	62 30       	cpi	r22, 0x02	; 2
 668:	09 f4       	brne	.+2      	; 0x66c <DIO_init+0xc>
 66a:	48 c0       	rjmp	.+144    	; 0x6fc <DIO_init+0x9c>
 66c:	63 30       	cpi	r22, 0x03	; 3
 66e:	09 f4       	brne	.+2      	; 0x672 <DIO_init+0x12>
 670:	66 c0       	rjmp	.+204    	; 0x73e <DIO_init+0xde>
 672:	86 c0       	rjmp	.+268    	; 0x780 <DIO_init+0x120>
	{
		case PORT_A:
			if(direction == INPUT){
 674:	41 11       	cpse	r20, r1
 676:	0f c0       	rjmp	.+30     	; 0x696 <DIO_init+0x36>
				DDRA &= ~(1<<pinNumber); // input
 678:	4a b3       	in	r20, 0x1a	; 26
 67a:	21 e0       	ldi	r18, 0x01	; 1
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	b9 01       	movw	r22, r18
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_init+0x26>
 682:	66 0f       	add	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	8a 95       	dec	r24
 688:	e2 f7       	brpl	.-8      	; 0x682 <DIO_init+0x22>
 68a:	cb 01       	movw	r24, r22
 68c:	80 95       	com	r24
 68e:	84 23       	and	r24, r20
 690:	8a bb       	out	0x1a, r24	; 26
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	08 95       	ret
	{
		case PORT_A:
			if(direction == INPUT){
				DDRA &= ~(1<<pinNumber); // input
			}
			else if(direction == OUTPUT){
 696:	41 30       	cpi	r20, 0x01	; 1
 698:	09 f0       	breq	.+2      	; 0x69c <DIO_init+0x3c>
 69a:	74 c0       	rjmp	.+232    	; 0x784 <DIO_init+0x124>
				DDRA |= (1<<pinNumber);  // output
 69c:	4a b3       	in	r20, 0x1a	; 26
 69e:	21 e0       	ldi	r18, 0x01	; 1
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	b9 01       	movw	r22, r18
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DIO_init+0x4a>
 6a6:	66 0f       	add	r22, r22
 6a8:	77 1f       	adc	r23, r23
 6aa:	8a 95       	dec	r24
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <DIO_init+0x46>
 6ae:	cb 01       	movw	r24, r22
 6b0:	84 2b       	or	r24, r20
 6b2:	8a bb       	out	0x1a, r24	; 26
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	08 95       	ret
			else{
				return WRONG_DIRECTION;
			}
			break;
		case PORT_B:
			if(direction == INPUT){
 6b8:	41 11       	cpse	r20, r1
 6ba:	0f c0       	rjmp	.+30     	; 0x6da <DIO_init+0x7a>
				DDRB &= ~(1<<pinNumber); // input
 6bc:	47 b3       	in	r20, 0x17	; 23
 6be:	21 e0       	ldi	r18, 0x01	; 1
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	b9 01       	movw	r22, r18
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_init+0x6a>
 6c6:	66 0f       	add	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	8a 95       	dec	r24
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_init+0x66>
 6ce:	cb 01       	movw	r24, r22
 6d0:	80 95       	com	r24
 6d2:	84 23       	and	r24, r20
 6d4:	87 bb       	out	0x17, r24	; 23
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	08 95       	ret
			break;
		case PORT_B:
			if(direction == INPUT){
				DDRB &= ~(1<<pinNumber); // input
			}
			else if(direction == OUTPUT){
 6da:	41 30       	cpi	r20, 0x01	; 1
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <DIO_init+0x80>
 6de:	54 c0       	rjmp	.+168    	; 0x788 <DIO_init+0x128>
				DDRB |= (1<<pinNumber);  // output
 6e0:	47 b3       	in	r20, 0x17	; 23
 6e2:	21 e0       	ldi	r18, 0x01	; 1
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	b9 01       	movw	r22, r18
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DIO_init+0x8e>
 6ea:	66 0f       	add	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	8a 95       	dec	r24
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <DIO_init+0x8a>
 6f2:	cb 01       	movw	r24, r22
 6f4:	84 2b       	or	r24, r20
 6f6:	87 bb       	out	0x17, r24	; 23
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	08 95       	ret
			else{
				return WRONG_DIRECTION;
			}
			break;
		case PORT_C:
			if(direction == INPUT){
 6fc:	41 11       	cpse	r20, r1
 6fe:	0f c0       	rjmp	.+30     	; 0x71e <DIO_init+0xbe>
				DDRC &= ~(1<<pinNumber); // input
 700:	44 b3       	in	r20, 0x14	; 20
 702:	21 e0       	ldi	r18, 0x01	; 1
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	b9 01       	movw	r22, r18
 708:	02 c0       	rjmp	.+4      	; 0x70e <DIO_init+0xae>
 70a:	66 0f       	add	r22, r22
 70c:	77 1f       	adc	r23, r23
 70e:	8a 95       	dec	r24
 710:	e2 f7       	brpl	.-8      	; 0x70a <DIO_init+0xaa>
 712:	cb 01       	movw	r24, r22
 714:	80 95       	com	r24
 716:	84 23       	and	r24, r20
 718:	84 bb       	out	0x14, r24	; 20
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	08 95       	ret
			break;
		case PORT_C:
			if(direction == INPUT){
				DDRC &= ~(1<<pinNumber); // input
			}
			else if(direction == OUTPUT){
 71e:	41 30       	cpi	r20, 0x01	; 1
 720:	a9 f5       	brne	.+106    	; 0x78c <DIO_init+0x12c>
				DDRC |= (1<<pinNumber);  // output
 722:	44 b3       	in	r20, 0x14	; 20
 724:	21 e0       	ldi	r18, 0x01	; 1
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	b9 01       	movw	r22, r18
 72a:	02 c0       	rjmp	.+4      	; 0x730 <DIO_init+0xd0>
 72c:	66 0f       	add	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	8a 95       	dec	r24
 732:	e2 f7       	brpl	.-8      	; 0x72c <DIO_init+0xcc>
 734:	cb 01       	movw	r24, r22
 736:	84 2b       	or	r24, r20
 738:	84 bb       	out	0x14, r24	; 20
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	08 95       	ret
			else{
				return WRONG_DIRECTION;
			}
			break;
		case PORT_D:
			if(direction == INPUT){
 73e:	41 11       	cpse	r20, r1
 740:	0f c0       	rjmp	.+30     	; 0x760 <DIO_init+0x100>
				DDRD &= ~(1<<pinNumber); // input
 742:	41 b3       	in	r20, 0x11	; 17
 744:	21 e0       	ldi	r18, 0x01	; 1
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	b9 01       	movw	r22, r18
 74a:	02 c0       	rjmp	.+4      	; 0x750 <DIO_init+0xf0>
 74c:	66 0f       	add	r22, r22
 74e:	77 1f       	adc	r23, r23
 750:	8a 95       	dec	r24
 752:	e2 f7       	brpl	.-8      	; 0x74c <DIO_init+0xec>
 754:	cb 01       	movw	r24, r22
 756:	80 95       	com	r24
 758:	84 23       	and	r24, r20
 75a:	81 bb       	out	0x11, r24	; 17
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	08 95       	ret
			break;
		case PORT_D:
			if(direction == INPUT){
				DDRD &= ~(1<<pinNumber); // input
			}
			else if(direction == OUTPUT){
 760:	41 30       	cpi	r20, 0x01	; 1
 762:	b1 f4       	brne	.+44     	; 0x790 <DIO_init+0x130>
				DDRD |= (1<<pinNumber);
 764:	41 b3       	in	r20, 0x11	; 17
 766:	21 e0       	ldi	r18, 0x01	; 1
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	b9 01       	movw	r22, r18
 76c:	02 c0       	rjmp	.+4      	; 0x772 <DIO_init+0x112>
 76e:	66 0f       	add	r22, r22
 770:	77 1f       	adc	r23, r23
 772:	8a 95       	dec	r24
 774:	e2 f7       	brpl	.-8      	; 0x76e <DIO_init+0x10e>
 776:	cb 01       	movw	r24, r22
 778:	84 2b       	or	r24, r20
 77a:	81 bb       	out	0x11, r24	; 17
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 77c:	80 e0       	ldi	r24, 0x00	; 0
 77e:	08 95       	ret
			else{
				return WRONG_DIRECTION;
			}
			break;
		default:
			return WRONG_PORT;
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	08 95       	ret
			}
			else if(direction == OUTPUT){
				DDRA |= (1<<pinNumber);  // output
			}
			else{
				return WRONG_DIRECTION;
 784:	83 e0       	ldi	r24, 0x03	; 3
 786:	08 95       	ret
			}
			else if(direction == OUTPUT){
				DDRB |= (1<<pinNumber);  // output
			}
			else{
				return WRONG_DIRECTION;
 788:	83 e0       	ldi	r24, 0x03	; 3
 78a:	08 95       	ret
			}
			else if(direction == OUTPUT){
				DDRC |= (1<<pinNumber);  // output
			}
			else{
				return WRONG_DIRECTION;
 78c:	83 e0       	ldi	r24, 0x03	; 3
 78e:	08 95       	ret
			}
			else if(direction == OUTPUT){
				DDRD |= (1<<pinNumber);
			}
			else{
				return WRONG_DIRECTION;
 790:	83 e0       	ldi	r24, 0x03	; 3
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
}
 792:	08 95       	ret

00000794 <DIO_write>:

DIO_ERR DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value){
	switch (portNumber){
 794:	61 30       	cpi	r22, 0x01	; 1
 796:	51 f1       	breq	.+84     	; 0x7ec <DIO_write+0x58>
 798:	38 f0       	brcs	.+14     	; 0x7a8 <DIO_write+0x14>
 79a:	62 30       	cpi	r22, 0x02	; 2
 79c:	09 f4       	brne	.+2      	; 0x7a0 <DIO_write+0xc>
 79e:	48 c0       	rjmp	.+144    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7a0:	63 30       	cpi	r22, 0x03	; 3
 7a2:	09 f4       	brne	.+2      	; 0x7a6 <DIO_write+0x12>
 7a4:	66 c0       	rjmp	.+204    	; 0x872 <__stack+0x13>
 7a6:	86 c0       	rjmp	.+268    	; 0x8b4 <__stack+0x55>
		
		case PORT_A:
			if(value == LOW){
 7a8:	41 11       	cpse	r20, r1
 7aa:	0f c0       	rjmp	.+30     	; 0x7ca <DIO_write+0x36>
				PORTA &= ~(1<<pinNumber); // LOW
 7ac:	4b b3       	in	r20, 0x1b	; 27
 7ae:	21 e0       	ldi	r18, 0x01	; 1
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	b9 01       	movw	r22, r18
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_write+0x26>
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	8a 95       	dec	r24
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_write+0x22>
 7be:	cb 01       	movw	r24, r22
 7c0:	80 95       	com	r24
 7c2:	84 23       	and	r24, r20
 7c4:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	08 95       	ret
		
		case PORT_A:
			if(value == LOW){
				PORTA &= ~(1<<pinNumber); // LOW
			}
			else if(value == HIGH){
 7ca:	41 30       	cpi	r20, 0x01	; 1
 7cc:	09 f0       	breq	.+2      	; 0x7d0 <DIO_write+0x3c>
 7ce:	74 c0       	rjmp	.+232    	; 0x8b8 <__stack+0x59>
				PORTA |= (1<<pinNumber); // HIGH
 7d0:	4b b3       	in	r20, 0x1b	; 27
 7d2:	21 e0       	ldi	r18, 0x01	; 1
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	b9 01       	movw	r22, r18
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <DIO_write+0x4a>
 7da:	66 0f       	add	r22, r22
 7dc:	77 1f       	adc	r23, r23
 7de:	8a 95       	dec	r24
 7e0:	e2 f7       	brpl	.-8      	; 0x7da <DIO_write+0x46>
 7e2:	cb 01       	movw	r24, r22
 7e4:	84 2b       	or	r24, r20
 7e6:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	08 95       	ret
			else{
				return WRONG_VALUE;
			}
			break;
		case PORT_B:
			if(value == LOW){
 7ec:	41 11       	cpse	r20, r1
 7ee:	0f c0       	rjmp	.+30     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
				PORTB &= ~(1<<pinNumber); // LOW
 7f0:	48 b3       	in	r20, 0x18	; 24
 7f2:	21 e0       	ldi	r18, 0x01	; 1
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	b9 01       	movw	r22, r18
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <DIO_write+0x6a>
 7fa:	66 0f       	add	r22, r22
 7fc:	77 1f       	adc	r23, r23
 7fe:	8a 95       	dec	r24
 800:	e2 f7       	brpl	.-8      	; 0x7fa <DIO_write+0x66>
 802:	cb 01       	movw	r24, r22
 804:	80 95       	com	r24
 806:	84 23       	and	r24, r20
 808:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	08 95       	ret
			break;
		case PORT_B:
			if(value == LOW){
				PORTB &= ~(1<<pinNumber); // LOW
			}
			else if(value == HIGH){
 80e:	41 30       	cpi	r20, 0x01	; 1
 810:	09 f0       	breq	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 812:	54 c0       	rjmp	.+168    	; 0x8bc <__stack+0x5d>
				PORTB |= (1<<pinNumber); // HIGH
 814:	48 b3       	in	r20, 0x18	; 24
 816:	21 e0       	ldi	r18, 0x01	; 1
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	b9 01       	movw	r22, r18
 81c:	02 c0       	rjmp	.+4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81e:	66 0f       	add	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	8a 95       	dec	r24
 824:	e2 f7       	brpl	.-8      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 826:	cb 01       	movw	r24, r22
 828:	84 2b       	or	r24, r20
 82a:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	08 95       	ret
			else{
				return WRONG_VALUE;
			}
			break;
		case PORT_C:
			if(value == LOW){
 830:	41 11       	cpse	r20, r1
 832:	0f c0       	rjmp	.+30     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
				PORTC &= ~(1<<pinNumber); // LOW
 834:	45 b3       	in	r20, 0x15	; 21
 836:	21 e0       	ldi	r18, 0x01	; 1
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	b9 01       	movw	r22, r18
 83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83e:	66 0f       	add	r22, r22
 840:	77 1f       	adc	r23, r23
 842:	8a 95       	dec	r24
 844:	e2 f7       	brpl	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 846:	cb 01       	movw	r24, r22
 848:	80 95       	com	r24
 84a:	84 23       	and	r24, r20
 84c:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	08 95       	ret
			break;
		case PORT_C:
			if(value == LOW){
				PORTC &= ~(1<<pinNumber); // LOW
			}
			else if(value == HIGH){
 852:	41 30       	cpi	r20, 0x01	; 1
 854:	a9 f5       	brne	.+106    	; 0x8c0 <__stack+0x61>
				PORTC |= (1<<pinNumber);  // HIGH
 856:	45 b3       	in	r20, 0x15	; 21
 858:	21 e0       	ldi	r18, 0x01	; 1
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	b9 01       	movw	r22, r18
 85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
 860:	66 0f       	add	r22, r22
 862:	77 1f       	adc	r23, r23
 864:	8a 95       	dec	r24
 866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
 868:	cb 01       	movw	r24, r22
 86a:	84 2b       	or	r24, r20
 86c:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	08 95       	ret
			else{
				return WRONG_VALUE;
			}
			break;
		case PORT_D:
			if(value == LOW){
 872:	41 11       	cpse	r20, r1
 874:	0f c0       	rjmp	.+30     	; 0x894 <__stack+0x35>
				PORTD &= ~(1<<pinNumber); // LOW
 876:	42 b3       	in	r20, 0x12	; 18
 878:	21 e0       	ldi	r18, 0x01	; 1
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	b9 01       	movw	r22, r18
 87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
 880:	66 0f       	add	r22, r22
 882:	77 1f       	adc	r23, r23
 884:	8a 95       	dec	r24
 886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
 888:	cb 01       	movw	r24, r22
 88a:	80 95       	com	r24
 88c:	84 23       	and	r24, r20
 88e:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	08 95       	ret
			break;
		case PORT_D:
			if(value == LOW){
				PORTD &= ~(1<<pinNumber); // LOW
			}
			else if(value == HIGH){
 894:	41 30       	cpi	r20, 0x01	; 1
 896:	b1 f4       	brne	.+44     	; 0x8c4 <__stack+0x65>
				PORTD |= (1<<pinNumber);  // HIGH
 898:	42 b3       	in	r20, 0x12	; 18
 89a:	21 e0       	ldi	r18, 0x01	; 1
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	b9 01       	movw	r22, r18
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
 8a2:	66 0f       	add	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	8a 95       	dec	r24
 8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <__stack+0x43>
 8aa:	cb 01       	movw	r24, r22
 8ac:	84 2b       	or	r24, r20
 8ae:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	08 95       	ret
			else{
				return WRONG_VALUE;
			}
			break;
		default:
			return WRONG_PORT;
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	08 95       	ret
			}
			else if(value == HIGH){
				PORTA |= (1<<pinNumber); // HIGH
			}
			else{
				return WRONG_VALUE;
 8b8:	84 e0       	ldi	r24, 0x04	; 4
 8ba:	08 95       	ret
			}
			else if(value == HIGH){
				PORTB |= (1<<pinNumber); // HIGH
			}
			else{
				return WRONG_VALUE;
 8bc:	84 e0       	ldi	r24, 0x04	; 4
 8be:	08 95       	ret
			}
			else if(value == HIGH){
				PORTC |= (1<<pinNumber);  // HIGH
			}
			else{
				return WRONG_VALUE;
 8c0:	84 e0       	ldi	r24, 0x04	; 4
 8c2:	08 95       	ret
			}
			else if(value == HIGH){
				PORTD |= (1<<pinNumber);  // HIGH
			}
			else{
				return WRONG_VALUE;
 8c4:	84 e0       	ldi	r24, 0x04	; 4
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
}
 8c6:	08 95       	ret

000008c8 <DIO_read>:
	DIO_read(pinNumber, portNumber, &value);
	return DIO_write(pinNumber, portNumber, !value);
}

DIO_ERR DIO_read(uint8_t pinNumber, uint8_t portNumber, uint8_t *value){
	switch (portNumber)
 8c8:	61 30       	cpi	r22, 0x01	; 1
 8ca:	f9 f0       	breq	.+62     	; 0x90a <DIO_read+0x42>
 8cc:	30 f0       	brcs	.+12     	; 0x8da <DIO_read+0x12>
 8ce:	62 30       	cpi	r22, 0x02	; 2
 8d0:	a1 f1       	breq	.+104    	; 0x93a <DIO_read+0x72>
 8d2:	63 30       	cpi	r22, 0x03	; 3
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <DIO_read+0x10>
 8d6:	49 c0       	rjmp	.+146    	; 0x96a <DIO_read+0xa2>
 8d8:	60 c0       	rjmp	.+192    	; 0x99a <DIO_read+0xd2>
	{
		case PORT_A:
			*value = (PINA & (1<<pinNumber)) >> pinNumber;
 8da:	99 b3       	in	r25, 0x19	; 25
 8dc:	21 e0       	ldi	r18, 0x01	; 1
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	b9 01       	movw	r22, r18
 8e2:	08 2e       	mov	r0, r24
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <DIO_read+0x22>
 8e6:	66 0f       	add	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	0a 94       	dec	r0
 8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <DIO_read+0x1e>
 8ee:	29 2f       	mov	r18, r25
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	26 23       	and	r18, r22
 8f4:	37 23       	and	r19, r23
 8f6:	b9 01       	movw	r22, r18
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <DIO_read+0x36>
 8fa:	75 95       	asr	r23
 8fc:	67 95       	ror	r22
 8fe:	8a 95       	dec	r24
 900:	e2 f7       	brpl	.-8      	; 0x8fa <DIO_read+0x32>
 902:	fa 01       	movw	r30, r20
 904:	60 83       	st	Z, r22
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 906:	80 e0       	ldi	r24, 0x00	; 0
DIO_ERR DIO_read(uint8_t pinNumber, uint8_t portNumber, uint8_t *value){
	switch (portNumber)
	{
		case PORT_A:
			*value = (PINA & (1<<pinNumber)) >> pinNumber;
			break;	
 908:	08 95       	ret
		case PORT_B:
			*value = (PINB & (1<<pinNumber)) >> pinNumber;
 90a:	96 b3       	in	r25, 0x16	; 22
 90c:	21 e0       	ldi	r18, 0x01	; 1
 90e:	30 e0       	ldi	r19, 0x00	; 0
 910:	b9 01       	movw	r22, r18
 912:	08 2e       	mov	r0, r24
 914:	02 c0       	rjmp	.+4      	; 0x91a <DIO_read+0x52>
 916:	66 0f       	add	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	0a 94       	dec	r0
 91c:	e2 f7       	brpl	.-8      	; 0x916 <DIO_read+0x4e>
 91e:	29 2f       	mov	r18, r25
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	26 23       	and	r18, r22
 924:	37 23       	and	r19, r23
 926:	b9 01       	movw	r22, r18
 928:	02 c0       	rjmp	.+4      	; 0x92e <DIO_read+0x66>
 92a:	75 95       	asr	r23
 92c:	67 95       	ror	r22
 92e:	8a 95       	dec	r24
 930:	e2 f7       	brpl	.-8      	; 0x92a <DIO_read+0x62>
 932:	fa 01       	movw	r30, r20
 934:	60 83       	st	Z, r22
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 936:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_A:
			*value = (PINA & (1<<pinNumber)) >> pinNumber;
			break;	
		case PORT_B:
			*value = (PINB & (1<<pinNumber)) >> pinNumber;
			break;
 938:	08 95       	ret
		case PORT_C:
			*value = (PINC & (1<<pinNumber)) >> pinNumber;
 93a:	93 b3       	in	r25, 0x13	; 19
 93c:	21 e0       	ldi	r18, 0x01	; 1
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	b9 01       	movw	r22, r18
 942:	08 2e       	mov	r0, r24
 944:	02 c0       	rjmp	.+4      	; 0x94a <DIO_read+0x82>
 946:	66 0f       	add	r22, r22
 948:	77 1f       	adc	r23, r23
 94a:	0a 94       	dec	r0
 94c:	e2 f7       	brpl	.-8      	; 0x946 <DIO_read+0x7e>
 94e:	29 2f       	mov	r18, r25
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	26 23       	and	r18, r22
 954:	37 23       	and	r19, r23
 956:	b9 01       	movw	r22, r18
 958:	02 c0       	rjmp	.+4      	; 0x95e <DIO_read+0x96>
 95a:	75 95       	asr	r23
 95c:	67 95       	ror	r22
 95e:	8a 95       	dec	r24
 960:	e2 f7       	brpl	.-8      	; 0x95a <DIO_read+0x92>
 962:	fa 01       	movw	r30, r20
 964:	60 83       	st	Z, r22
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 966:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_B:
			*value = (PINB & (1<<pinNumber)) >> pinNumber;
			break;
		case PORT_C:
			*value = (PINC & (1<<pinNumber)) >> pinNumber;
			break;
 968:	08 95       	ret
		case PORT_D:
			*value = (PIND & (1<<pinNumber)) >> pinNumber;
 96a:	90 b3       	in	r25, 0x10	; 16
 96c:	21 e0       	ldi	r18, 0x01	; 1
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	b9 01       	movw	r22, r18
 972:	08 2e       	mov	r0, r24
 974:	02 c0       	rjmp	.+4      	; 0x97a <DIO_read+0xb2>
 976:	66 0f       	add	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	0a 94       	dec	r0
 97c:	e2 f7       	brpl	.-8      	; 0x976 <DIO_read+0xae>
 97e:	29 2f       	mov	r18, r25
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	26 23       	and	r18, r22
 984:	37 23       	and	r19, r23
 986:	b9 01       	movw	r22, r18
 988:	02 c0       	rjmp	.+4      	; 0x98e <DIO_read+0xc6>
 98a:	75 95       	asr	r23
 98c:	67 95       	ror	r22
 98e:	8a 95       	dec	r24
 990:	e2 f7       	brpl	.-8      	; 0x98a <DIO_read+0xc2>
 992:	fa 01       	movw	r30, r20
 994:	60 83       	st	Z, r22
			break;
		default:
			return WRONG_PORT;
			break;
	}
	return DIO_OK;
 996:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_C:
			*value = (PINC & (1<<pinNumber)) >> pinNumber;
			break;
		case PORT_D:
			*value = (PIND & (1<<pinNumber)) >> pinNumber;
			break;
 998:	08 95       	ret
		default:
			return WRONG_PORT;
 99a:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return DIO_OK;
 99c:	08 95       	ret

0000099e <DIO_toggle>:
			break;
	}
	return DIO_OK;
}

DIO_ERR DIO_toggle(uint8_t pinNumber, uint8_t portNumber){
 99e:	0f 93       	push	r16
 9a0:	1f 93       	push	r17
 9a2:	cf 93       	push	r28
 9a4:	df 93       	push	r29
 9a6:	1f 92       	push	r1
 9a8:	cd b7       	in	r28, 0x3d	; 61
 9aa:	de b7       	in	r29, 0x3e	; 62
 9ac:	18 2f       	mov	r17, r24
 9ae:	06 2f       	mov	r16, r22
	uint8_t value;
	DIO_read(pinNumber, portNumber, &value);
 9b0:	ae 01       	movw	r20, r28
 9b2:	4f 5f       	subi	r20, 0xFF	; 255
 9b4:	5f 4f       	sbci	r21, 0xFF	; 255
 9b6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <DIO_read>
	return DIO_write(pinNumber, portNumber, !value);
 9ba:	41 e0       	ldi	r20, 0x01	; 1
 9bc:	89 81       	ldd	r24, Y+1	; 0x01
 9be:	81 11       	cpse	r24, r1
 9c0:	40 e0       	ldi	r20, 0x00	; 0
 9c2:	60 2f       	mov	r22, r16
 9c4:	81 2f       	mov	r24, r17
 9c6:	0e 94 ca 03 	call	0x794	; 0x794 <DIO_write>
}
 9ca:	0f 90       	pop	r0
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	1f 91       	pop	r17
 9d2:	0f 91       	pop	r16
 9d4:	08 95       	ret

000009d6 <EXT_INT_0_FALLING_init>:

#include "interrupt.h"

INT_ERR EXT_INT_0_FALLING_init(){
	// ISC01 = 1, ISC00 = 0, detect falling edge
	MCUCR |= (1<<1);
 9d6:	85 b7       	in	r24, 0x35	; 53
 9d8:	82 60       	ori	r24, 0x02	; 2
 9da:	85 bf       	out	0x35, r24	; 53
	//MCUCR = 0x00;
	// enable EXT_INT_0
	GICR |= (1<<6);
 9dc:	8b b7       	in	r24, 0x3b	; 59
 9de:	80 64       	ori	r24, 0x40	; 64
 9e0:	8b bf       	out	0x3b, r24	; 59
	return INT_OK;
}
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	08 95       	ret

000009e6 <MILLIS_init>:
uint8_t volatile numberOfOverflows = 0;
unsigned long volatile ms = 0;

// init timer 2 normal mode
MILIS_ERR MILLIS_init(){
	TCCR2 = 0x00; // timer2 normal mode
 9e6:	15 bc       	out	0x25, r1	; 37
	TCNT2 = 6; // timer2 initial value = 6(calculated)
 9e8:	86 e0       	ldi	r24, 0x06	; 6
 9ea:	84 bd       	out	0x24, r24	; 36
	TCCR2 |= (1<<0); // start timer
 9ec:	85 b5       	in	r24, 0x25	; 37
 9ee:	81 60       	ori	r24, 0x01	; 1
 9f0:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << 6); // TOIE2 = 1 enable overflow interrupt ISR
 9f2:	89 b7       	in	r24, 0x39	; 57
 9f4:	80 64       	ori	r24, 0x40	; 64
 9f6:	89 bf       	out	0x39, r24	; 57
	return MILLIS_OK;
}
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	08 95       	ret

000009fc <millis>:

// return time from the beginning in milli seconds
unsigned long millis(){
	return ms;
 9fc:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 a00:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 a04:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 a08:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
}
 a0c:	08 95       	ret

00000a0e <__vector_5>:

// each 4 overflows = 1ms
ISR(TIMMER_OVF_INT_1){
 a0e:	1f 92       	push	r1
 a10:	0f 92       	push	r0
 a12:	0f b6       	in	r0, 0x3f	; 63
 a14:	0f 92       	push	r0
 a16:	11 24       	eor	r1, r1
 a18:	8f 93       	push	r24
 a1a:	9f 93       	push	r25
 a1c:	af 93       	push	r26
 a1e:	bf 93       	push	r27
	TCNT2 = 6; // overflows each 256-6= 250us
 a20:	86 e0       	ldi	r24, 0x06	; 6
 a22:	84 bd       	out	0x24, r24	; 36
	numberOfOverflows++; // overflow tracker
 a24:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <numberOfOverflows>
 a28:	8f 5f       	subi	r24, 0xFF	; 255
 a2a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <numberOfOverflows>
	if(numberOfOverflows == 4){ // 4 overflows = 1ms
 a2e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <numberOfOverflows>
 a32:	84 30       	cpi	r24, 0x04	; 4
 a34:	a9 f4       	brne	.+42     	; 0xa60 <__vector_5+0x52>
		numberOfOverflows = 0; // start counting from 0
 a36:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <numberOfOverflows>
		ms++; // time counter
 a3a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 a3e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 a42:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 a46:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 a4a:	01 96       	adiw	r24, 0x01	; 1
 a4c:	a1 1d       	adc	r26, r1
 a4e:	b1 1d       	adc	r27, r1
 a50:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 a54:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 a58:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 a5c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	}
 a60:	bf 91       	pop	r27
 a62:	af 91       	pop	r26
 a64:	9f 91       	pop	r25
 a66:	8f 91       	pop	r24
 a68:	0f 90       	pop	r0
 a6a:	0f be       	out	0x3f, r0	; 63
 a6c:	0f 90       	pop	r0
 a6e:	1f 90       	pop	r1
 a70:	18 95       	reti

00000a72 <__tablejump2__>:
 a72:	ee 0f       	add	r30, r30
 a74:	ff 1f       	adc	r31, r31
 a76:	05 90       	lpm	r0, Z+
 a78:	f4 91       	lpm	r31, Z
 a7a:	e0 2d       	mov	r30, r0
 a7c:	09 94       	ijmp

00000a7e <_exit>:
 a7e:	f8 94       	cli

00000a80 <__stop_program>:
 a80:	ff cf       	rjmp	.-2      	; 0xa80 <__stop_program>
